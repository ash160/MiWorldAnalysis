+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f90ed5b89a0>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f90ed5b89a0>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f90ed5b89a0>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1584620934.313673
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1584620934.313673 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1584620934.313673 pythondocker_db_manager
faad1a909ce46e60f3d503f9f0df30080316dad8957ff8934b1ec9a00509c416
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1584620934.313673
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1584620934.313673', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1584620934.313673
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1584620934.313673', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1584620934.313673
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1584620934.313673', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1584620934.313673
None
[sudo] password for miworld_monitor: docker start db_manager1584620934.313673
db_manager1584620934.313673
in socket
{'NETWORK_INTERFACE': {'MONITOR_NET': '10.0.0.12', 'MANAGER_IN_NET': '14.0.0.12', 'MANAGER_OUT_NET': '15.0.0.12'}, 'NGINX': {'IN_NET': '14.0.0.2', 'OUT_NET': '15.0.0.2', 'url_type': 'mn_con'}}
{"NETWORK_INTERFACE":{"MONITOR_NET":"10.0.0.12","MANAGER_IN_NET":"14.0.0.12","MANAGER_OUT_NET":"15.0.0.12"},"NGINX":{"IN_NET":"14.0.0.2","OUT_NET":"15.0.0.2","url_type":"mn_con"}}
0 10.0.0.4 socket json http://10.0.0.12:10/get_task_from_monitor {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager', 'ip': '10.0.0.12'}
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f1a501247f0>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f1a501247f0>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f1a501247f0>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager'}
Try to assing a container
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f149d4e68e0>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f149d4e68e0>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f149d4e68e0>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager'}
Try to assing a container
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7fd307ac62b0>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7fd307ac62b0>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7fd307ac62b0>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager'}
Try to assing a container
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7feda7243a30>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7feda7243a30>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7feda7243a30>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager'}
Try to assing a container
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f3d9ba73850>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f3d9ba73850>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f3d9ba73850>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager'}
Try to assing a container
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7fc504593bb0>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7fc504593bb0>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7fc504593bb0>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1586965934.421593
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1586965934.421593 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1586965934.421593 pythondocker_db_manager
0c660c6ab968618c2e79740928df48be23618bcfd6ea0b83188de87d7e3626be
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1586965934.421593
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1586965934.421593', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1586965934.421593
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1586965934.421593', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1586965934.421593
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1586965934.421593', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1586965934.421593
None
[sudo] password for miworld_monitor: docker start db_manager1586965934.421593
db_manager1586965934.421593
in socket
{'NETWORK_INTERFACE': {'MONITOR_NET': '10.0.0.12', 'MANAGER_IN_NET': '14.0.0.12', 'MANAGER_OUT_NET': '15.0.0.12'}, 'NGINX': {'IN_NET': '14.0.0.2', 'OUT_NET': '15.0.0.2', 'url_type': 'mn_con'}}
{"NETWORK_INTERFACE":{"MONITOR_NET":"10.0.0.12","MANAGER_IN_NET":"14.0.0.12","MANAGER_OUT_NET":"15.0.0.12"},"NGINX":{"IN_NET":"14.0.0.2","OUT_NET":"15.0.0.2","url_type":"mn_con"}}
0 10.0.0.4 socket json http://10.0.0.12:10/get_task_from_monitor {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager', 'ip': '10.0.0.12'}
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f11f21ee8b0>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f11f21ee8b0>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f11f21ee8b0>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager'}
Try to assing a container
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7fcfbab71790>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7fcfbab71790>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7fcfbab71790>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager'}
Try to assing a container
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f2967846760>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f2967846760>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f2967846760>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1587046548.791698
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1587046548.791698 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1587046548.791698 pythondocker_db_manager
96ee6bef1b6f6d6a05b967bccb1ee09774e927f7c7f4c4ebe6bdd54a731c6577
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1587046548.791698
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1587046548.791698', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1587046548.791698
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1587046548.791698', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1587046548.791698
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1587046548.791698', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1587046548.791698
None
[sudo] password for miworld_monitor: docker start db_manager1587046548.791698
db_manager1587046548.791698
in socket
{'NETWORK_INTERFACE': {'MONITOR_NET': '10.0.0.12', 'MANAGER_IN_NET': '14.0.0.12', 'MANAGER_OUT_NET': '15.0.0.12'}, 'NGINX': {'IN_NET': '14.0.0.2', 'OUT_NET': '15.0.0.2', 'url_type': 'mn_con'}}
{"NETWORK_INTERFACE":{"MONITOR_NET":"10.0.0.12","MANAGER_IN_NET":"14.0.0.12","MANAGER_OUT_NET":"15.0.0.12"},"NGINX":{"IN_NET":"14.0.0.2","OUT_NET":"15.0.0.2","url_type":"mn_con"}}
0 10.0.0.4 socket json http://10.0.0.12:10/get_task_from_monitor {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager', 'ip': '10.0.0.12'}
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f6d45d82970>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f6d45d82970>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f6d45d82970>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1587049927.125042
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1587049927.125042 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1587049927.125042 pythondocker_db_manager
b028a177442ca45d7ece88d46467a193097e52cdee6c8ea7497a5d78ead4afd0
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1587049927.125042
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1587049927.125042', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1587049927.125042
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1587049927.125042', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1587049927.125042
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1587049927.125042', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1587049927.125042
None
[sudo] password for miworld_monitor: docker start db_manager1587049927.125042
db_manager1587049927.125042
in socket
{'NETWORK_INTERFACE': {'MONITOR_NET': '10.0.0.12', 'MANAGER_IN_NET': '14.0.0.12', 'MANAGER_OUT_NET': '15.0.0.12'}, 'NGINX': {'IN_NET': '14.0.0.2', 'OUT_NET': '15.0.0.2', 'url_type': 'mn_con'}}
{"NETWORK_INTERFACE":{"MONITOR_NET":"10.0.0.12","MANAGER_IN_NET":"14.0.0.12","MANAGER_OUT_NET":"15.0.0.12"},"NGINX":{"IN_NET":"14.0.0.2","OUT_NET":"15.0.0.2","url_type":"mn_con"}}
0 10.0.0.4 socket json http://10.0.0.12:10/get_task_from_monitor {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager', 'ip': '10.0.0.12'}
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f4c9302e700>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f4c9302e700>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f4c9302e700>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager'}
Try to assing a container
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f158ad06880>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f158ad06880>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f158ad06880>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1587050504.317137
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1587050504.317137 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1587050504.317137 pythondocker_db_manager
5d7f0f21b0dc1fb872fc38fec6f5ec3140dfbee3180b646fbdd11fd2175ce3c2
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1587050504.317137
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1587050504.317137', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1587050504.317137
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1587050504.317137', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1587050504.317137
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1587050504.317137', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1587050504.317137
None
[sudo] password for miworld_monitor: docker start db_manager1587050504.317137
db_manager1587050504.317137
in socket
{'NETWORK_INTERFACE': {'MONITOR_NET': '10.0.0.12', 'MANAGER_IN_NET': '14.0.0.12', 'MANAGER_OUT_NET': '15.0.0.12'}, 'NGINX': {'IN_NET': '14.0.0.2', 'OUT_NET': '15.0.0.2', 'url_type': 'mn_con'}}
{"NETWORK_INTERFACE":{"MONITOR_NET":"10.0.0.12","MANAGER_IN_NET":"14.0.0.12","MANAGER_OUT_NET":"15.0.0.12"},"NGINX":{"IN_NET":"14.0.0.2","OUT_NET":"15.0.0.2","url_type":"mn_con"}}
0 10.0.0.4 socket json http://10.0.0.12:10/get_task_from_monitor {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager', 'ip': '10.0.0.12'}
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S python3 file_write.py /home/miworld/micro_server/docker/nginx_docker/mn_con/nginx.conf events{}
http {
	map $http_upgrade $connection_upgrade {
		default upgrade;
		''      close;
	}
	upstream new_list {
		server 127.0.0.1:9998 weight=5;
	}
	server {
                listen 80;
                location ~ ^/(RedisViewSet/viewset/Cassandra/list|socket\.io){
                	proxy_http_version 1.1;
                	proxy_set_header Upgrade $http_upgrade;
                	proxy_set_header Connection $connection_upgrade;
                	proxy_pass http://new_list;
                }
	}
}
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S python3 nginx_changer.py nginx_manager_connector
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f86bd30d310>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f86bd30d310>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f86bd30d310>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1587050874.790144
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1587050874.790144 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1587050874.790144 pythondocker_db_manager
2cad5170be84547d4d3db48c329e2b9ed0d60d01f5f79608d1ed78dc6b6bef15
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1587050874.790144
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1587050874.790144', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1587050874.790144
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1587050874.790144', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1587050874.790144
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1587050874.790144', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1587050874.790144
None
[sudo] password for miworld_monitor: docker start db_manager1587050874.790144
db_manager1587050874.790144
in socket
{'NETWORK_INTERFACE': {'MONITOR_NET': '10.0.0.12', 'MANAGER_IN_NET': '14.0.0.12', 'MANAGER_OUT_NET': '15.0.0.12'}, 'NGINX': {'IN_NET': '14.0.0.2', 'OUT_NET': '15.0.0.2', 'url_type': 'mn_con'}}
{"NETWORK_INTERFACE":{"MONITOR_NET":"10.0.0.12","MANAGER_IN_NET":"14.0.0.12","MANAGER_OUT_NET":"15.0.0.12"},"NGINX":{"IN_NET":"14.0.0.2","OUT_NET":"15.0.0.2","url_type":"mn_con"}}
0 10.0.0.4 socket json http://10.0.0.12:10/get_task_from_monitor {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager', 'ip': '10.0.0.12'}
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S python3 file_write.py /home/miworld/micro_server/docker/nginx_docker/mn_con/nginx.conf events{}
http {
	map $http_upgrade $connection_upgrade {
		default upgrade;
		''      close;
	}
	upstream new_list {
		server 127.0.0.1:9998 weight=5;
	}
	server {
                listen 80;
                location ~ ^/(RedisViewSet/viewset/Cassandra/list|socket\.io){
                	proxy_http_version 1.1;
                	proxy_set_header Upgrade $http_upgrade;
                	proxy_set_header Connection $connection_upgrade;
                	proxy_pass http://new_list;
                }
	}
}"
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S python3 nginx_changer.py nginx_manager_connector"
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f6a3039b310>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f6a3039b310>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f6a3039b310>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1587133651.388235
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1587133651.388235 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1587133651.388235 pythondocker_db_manager
a534a77f2806044ec0642ad6c09c5ac4275bce59858b95cf9dea9837128d6792
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1587133651.388235
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1587133651.388235', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1587133651.388235
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1587133651.388235', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1587133651.388235
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1587133651.388235', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1587133651.388235
None
[sudo] password for miworld_monitor: docker start db_manager1587133651.388235
db_manager1587133651.388235
in socket
{'NETWORK_INTERFACE': {'MONITOR_NET': '10.0.0.12', 'MANAGER_IN_NET': '14.0.0.12', 'MANAGER_OUT_NET': '15.0.0.12'}, 'NGINX': {'IN_NET': '14.0.0.2', 'OUT_NET': '15.0.0.2', 'url_type': 'mn_con'}}
{"NETWORK_INTERFACE":{"MONITOR_NET":"10.0.0.12","MANAGER_IN_NET":"14.0.0.12","MANAGER_OUT_NET":"15.0.0.12"},"NGINX":{"IN_NET":"14.0.0.2","OUT_NET":"15.0.0.2","url_type":"mn_con"}}
0 10.0.0.4 socket json http://10.0.0.12:10/get_task_from_monitor {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager', 'ip': '10.0.0.12'}
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S python3 file_write.py /home/miworld/micro_server/docker/nginx_docker/mn_con/nginx.conf events{}
http {
	map $http_upgrade $connection_upgrade {
		default upgrade;
		''      close;
	}
	upstream new_list {
		server 127.0.0.1:9998 weight=5;
	}
	server {
                listen 80;
                location ~ ^/(RedisViewSet/viewset/Cassandra/list|socket\.io){
                	proxy_http_version 1.1;
                	proxy_set_header Upgrade $http_upgrade;
                	proxy_set_header Connection $connection_upgrade;
                	proxy_pass http://new_list;
                }
	}
}"
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S python3 nginx_changer.py nginx_manager_connector"
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f052ea079d0>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f052ea079d0>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f052ea079d0>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager'}
Try to assing a container
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f80306dc880>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f80306dc880>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f80306dc880>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager'}
Try to assing a container
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f46c1ddbd30>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f46c1ddbd30>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f46c1ddbd30>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1587217647.792627
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1587217647.792627 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1587217647.792627 pythondocker_db_manager
4ce76ab72c0c2b0df032fa94ce6bf316fb6b7c148e3450077ca21a17573b24c0
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1587217647.792627
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1587217647.792627', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1587217647.792627
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1587217647.792627', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1587217647.792627
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1587217647.792627', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1587217647.792627
None
[sudo] password for miworld_monitor: docker start db_manager1587217647.792627
db_manager1587217647.792627
in socket
{'NETWORK_INTERFACE': {'MONITOR_NET': '10.0.0.12', 'MANAGER_IN_NET': '14.0.0.12', 'MANAGER_OUT_NET': '15.0.0.12'}, 'NGINX': {'IN_NET': '14.0.0.2', 'OUT_NET': '15.0.0.2', 'url_type': 'mn_con'}}
{"NETWORK_INTERFACE":{"MONITOR_NET":"10.0.0.12","MANAGER_IN_NET":"14.0.0.12","MANAGER_OUT_NET":"15.0.0.12"},"NGINX":{"IN_NET":"14.0.0.2","OUT_NET":"15.0.0.2","url_type":"mn_con"}}
0 10.0.0.4 socket json http://10.0.0.12:10/get_task_from_monitor {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager', 'ip': '10.0.0.12'}
scp -o StrictHostKeyChecking=no -i my_secreat temp_file.txt miworld_monitor@172.17.0.1:~nginx_config_01.txt
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S cp nginx_config_01.txt /home/miworld/micro_server/docker/nginx_docker/mn_con/nginx.conf"
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S python3 nginx_changer.py nginx_manager_connector"
[sudo] password for miworld_monitor: cp: cannot stat 'nginx_config_01.txt': No such file or directory
[sudo] password for miworld_monitor: [31mERROR[0m: 
        Can't find a suitable configuration file in this directory or any
        parent. Are you in the right directory?

        Supported filenames: docker-compose.yml, docker-compose.yaml
        
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f06fa2ac880>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f06fa2ac880>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f06fa2ac880>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1587218233.652811
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1587218233.652811 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1587218233.652811 pythondocker_db_manager
f6d6c3ae83dcd5a9903d1037c39a57542c5215b8ed1e2b67ab25b875d2be3b86
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1587218233.652811
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1587218233.652811', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1587218233.652811
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1587218233.652811', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1587218233.652811
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1587218233.652811', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1587218233.652811
None
[sudo] password for miworld_monitor: docker start db_manager1587218233.652811
db_manager1587218233.652811
in socket
{'NETWORK_INTERFACE': {'MONITOR_NET': '10.0.0.12', 'MANAGER_IN_NET': '14.0.0.12', 'MANAGER_OUT_NET': '15.0.0.12'}, 'NGINX': {'IN_NET': '14.0.0.2', 'OUT_NET': '15.0.0.2', 'url_type': 'mn_con'}}
{"NETWORK_INTERFACE":{"MONITOR_NET":"10.0.0.12","MANAGER_IN_NET":"14.0.0.12","MANAGER_OUT_NET":"15.0.0.12"},"NGINX":{"IN_NET":"14.0.0.2","OUT_NET":"15.0.0.2","url_type":"mn_con"}}
0 10.0.0.4 socket json http://10.0.0.12:10/get_task_from_monitor {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager', 'ip': '10.0.0.12'}
scp -o StrictHostKeyChecking=no -i my_secreat temp_file.txt miworld_monitor@172.17.0.1:~/nginx_config_01.txt
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S cp nginx_config_01.txt /home/miworld/micro_server/docker/nginx_docker/mn_con/nginx.conf"
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S python3 nginx_changer.py nginx_manager_connector"
[sudo] password for miworld_monitor: [sudo] password for miworld_monitor: [31mERROR[0m: 
        Can't find a suitable configuration file in this directory or any
        parent. Are you in the right directory?

        Supported filenames: docker-compose.yml, docker-compose.yaml
        
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f08dc9cc7c0>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f08dc9cc7c0>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f08dc9cc7c0>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1587220926.329295
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1587220926.329295 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1587220926.329295 pythondocker_db_manager
9636ac8901dd9aa2e7e086669028d13081b33eddbaf62eb90dfcfe97f7c211a5
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1587220926.329295
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1587220926.329295', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1587220926.329295
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1587220926.329295', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1587220926.329295
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1587220926.329295', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1587220926.329295
None
[sudo] password for miworld_monitor: docker start db_manager1587220926.329295
db_manager1587220926.329295
in socket
{'NETWORK_INTERFACE': {'MONITOR_NET': '10.0.0.12', 'MANAGER_IN_NET': '14.0.0.12', 'MANAGER_OUT_NET': '15.0.0.12'}, 'NGINX': {'IN_NET': '14.0.0.2', 'OUT_NET': '15.0.0.2', 'url_type': 'mn_con'}}
{"NETWORK_INTERFACE":{"MONITOR_NET":"10.0.0.12","MANAGER_IN_NET":"14.0.0.12","MANAGER_OUT_NET":"15.0.0.12"},"NGINX":{"IN_NET":"14.0.0.2","OUT_NET":"15.0.0.2","url_type":"mn_con"}}
0 10.0.0.4 socket json http://10.0.0.12:10/get_task_from_monitor {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager', 'ip': '10.0.0.12'}
scp -o StrictHostKeyChecking=no -i my_secreat temp_file.txt miworld_monitor@172.17.0.1:~/nginx_config_01.txt
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S cp nginx_config_01.txt /home/miworld/micro_server/docker/nginx_docker/mn_con/nginx.conf"
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S python3 nginx_changer.py manager"
[sudo] password for miworld_monitor: [sudo] password for miworld_monitor: docker-compose exec manager nginx -s reload
[31mERROR[0m: No container found for manager_1
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7ff5dd3f4af0>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7ff5dd3f4af0>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7ff5dd3f4af0>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1587223317.417441
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1587223317.417441 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1587223317.417441 pythondocker_db_manager
af18f664551a8559b0134d18329ce028ee3e57935f202247e7b243410dee3da1
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1587223317.417441
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1587223317.417441', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1587223317.417441
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1587223317.417441', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1587223317.417441
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1587223317.417441', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1587223317.417441
None
[sudo] password for miworld_monitor: docker start db_manager1587223317.417441
db_manager1587223317.417441
in socket
{'NETWORK_INTERFACE': {'MONITOR_NET': '10.0.0.12', 'MANAGER_IN_NET': '14.0.0.12', 'MANAGER_OUT_NET': '15.0.0.12'}, 'NGINX': {'IN_NET': '14.0.0.2', 'OUT_NET': '15.0.0.2', 'url_type': 'mn_con'}}
{"NETWORK_INTERFACE":{"MONITOR_NET":"10.0.0.12","MANAGER_IN_NET":"14.0.0.12","MANAGER_OUT_NET":"15.0.0.12"},"NGINX":{"IN_NET":"14.0.0.2","OUT_NET":"15.0.0.2","url_type":"mn_con"}}
0 10.0.0.4 socket json http://10.0.0.12:10/get_task_from_monitor {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager', 'ip': '10.0.0.12'}
{'configes': [{'url': '/PermissionPermissionBitMapper/viewset/Cassandracreate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandracreate'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandraupdate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandraupdate'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandradelete', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandradelete'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandralist', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandralist'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandraretrieve', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandraretrieve'}], 'url_type': 'mn_con'}
scp -o StrictHostKeyChecking=no -i my_secreat temp_file.txt miworld_monitor@172.17.0.1:~/nginx_config_01.txt
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S cp nginx_config_01.txt /home/miworld_monitor/mn_con/nginx.conf"
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S python3 nginx_changer.py manager"
[sudo] password for miworld_monitor: [sudo] password for miworld_monitor: docker-compose exec manager nginx -s reload
Traceback (most recent call last):
  File "/usr/bin/docker-compose", line 11, in <module>
    load_entry_point('docker-compose==1.17.1', 'console_scripts', 'docker-compose')()
  File "/usr/lib/python2.7/dist-packages/compose/cli/main.py", line 68, in main
    command()
  File "/usr/lib/python2.7/dist-packages/compose/cli/main.py", line 121, in perform_command
    handler(command, command_options)
  File "/usr/lib/python2.7/dist-packages/compose/cli/main.py", line 470, in exec_command
    pty.start()
  File "/usr/lib/python2.7/dist-packages/dockerpty/pty.py", line 338, in start
    io.set_blocking(pump, flag)
  File "/usr/lib/python2.7/dist-packages/dockerpty/io.py", line 32, in set_blocking
    old_flag = fcntl.fcntl(fd, fcntl.F_GETFL)
ValueError: file descriptor cannot be a negative integer (-1)
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f5ed8ad2dc0>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f5ed8ad2dc0>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f5ed8ad2dc0>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1587224438.728583
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1587224438.728583 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1587224438.728583 pythondocker_db_manager
019bbf7b66bb3790c69349347aef531ee837c0f7ecf023131803f6f9acbbf48e
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1587224438.728583
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1587224438.728583', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1587224438.728583
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1587224438.728583', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1587224438.728583
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1587224438.728583', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1587224438.728583
None
[sudo] password for miworld_monitor: docker start db_manager1587224438.728583
db_manager1587224438.728583
in socket
{'NETWORK_INTERFACE': {'MONITOR_NET': '10.0.0.12', 'MANAGER_IN_NET': '14.0.0.12', 'MANAGER_OUT_NET': '15.0.0.12'}, 'NGINX': {'IN_NET': '14.0.0.2', 'OUT_NET': '15.0.0.2', 'url_type': 'mn_con'}}
{"NETWORK_INTERFACE":{"MONITOR_NET":"10.0.0.12","MANAGER_IN_NET":"14.0.0.12","MANAGER_OUT_NET":"15.0.0.12"},"NGINX":{"IN_NET":"14.0.0.2","OUT_NET":"15.0.0.2","url_type":"mn_con"}}
0 10.0.0.4 socket json http://10.0.0.12:10/get_task_from_monitor {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager', 'ip': '10.0.0.12'}
{'configes': [{'url': '/PermissionPermissionBitMapper/viewset/Cassandracreate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandracreate'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandraupdate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandraupdate'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandradelete', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandradelete'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandralist', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandralist'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandraretrieve', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandraretrieve'}], 'url_type': 'mn_con'}
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f3732a3c0d0>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f3732a3c0d0>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f3732a3c0d0>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1587226318.834628
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1587226318.834628 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1587226318.834628 pythondocker_db_manager
3fd5e0ec65145c78a3a5d2fda8702bdc0688684569aa7383fe85134c138f1717
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1587226318.834628
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1587226318.834628', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1587226318.834628
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1587226318.834628', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1587226318.834628
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1587226318.834628', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1587226318.834628
None
[sudo] password for miworld_monitor: docker start db_manager1587226318.834628
db_manager1587226318.834628
in socket
{'NETWORK_INTERFACE': {'MONITOR_NET': '10.0.0.12', 'MANAGER_IN_NET': '14.0.0.12', 'MANAGER_OUT_NET': '15.0.0.12'}, 'NGINX': {'IN_NET': '14.0.0.2', 'OUT_NET': '15.0.0.2', 'url_type': 'mn_con'}}
{"NETWORK_INTERFACE":{"MONITOR_NET":"10.0.0.12","MANAGER_IN_NET":"14.0.0.12","MANAGER_OUT_NET":"15.0.0.12"},"NGINX":{"IN_NET":"14.0.0.2","OUT_NET":"15.0.0.2","url_type":"mn_con"}}
0 10.0.0.4 socket json http://10.0.0.12:10/get_task_from_monitor {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager', 'ip': '10.0.0.12'}
{'configes': [{'url': '/PermissionPermissionBitMapper/viewset/Cassandracreate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandracreate'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandraupdate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandraupdate'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandradelete', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandradelete'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandralist', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandralist'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandraretrieve', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandraretrieve'}], 'url_type': 'mn_con'}
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7fcf66134ee0>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7fcf66134ee0>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7fcf66134ee0>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1587226656.367093
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1587226656.367093 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1587226656.367093 pythondocker_db_manager
2164c7a7bf364b1287e2fa8e3b3370fcd6de57d5161b02c796e61fb666c03efd
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1587226656.367093
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1587226656.367093', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1587226656.367093
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1587226656.367093', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1587226656.367093
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1587226656.367093', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1587226656.367093
None
[sudo] password for miworld_monitor: docker start db_manager1587226656.367093
db_manager1587226656.367093
in socket
{'NETWORK_INTERFACE': {'MONITOR_NET': '10.0.0.12', 'MANAGER_IN_NET': '14.0.0.12', 'MANAGER_OUT_NET': '15.0.0.12'}, 'NGINX': {'IN_NET': '14.0.0.2', 'OUT_NET': '15.0.0.2', 'url_type': 'mn_con'}}
{"NETWORK_INTERFACE":{"MONITOR_NET":"10.0.0.12","MANAGER_IN_NET":"14.0.0.12","MANAGER_OUT_NET":"15.0.0.12"},"NGINX":{"IN_NET":"14.0.0.2","OUT_NET":"15.0.0.2","url_type":"mn_con"}}
0 10.0.0.4 socket json http://10.0.0.12:10/get_task_from_monitor {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager', 'ip': '10.0.0.12'}
{'configes': [{'url': '/PermissionPermissionBitMapper/viewset/Cassandracreate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandracreate'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandraupdate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandraupdate'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandradelete', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandradelete'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandralist', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandralist'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandraretrieve', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandraretrieve'}], 'url_type': 'mn_con'}
scp -o StrictHostKeyChecking=no -i my_secreat temp_file.txt miworld_monitor@172.17.0.1:~/nginx_config_01.txt
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S cp nginx_config_01.txt /home/miworld_monitor/mn_con/nginx.conf"
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S python3 nginx_changer.py manager"
[sudo] password for miworld_monitor: [sudo] password for miworld_monitor: docker-compose exec manager nginx -s reload
2020/04/18 16:18:01 [emerg] 78#78: no host in upstream "/PermissionPermissionBitMapper/viewset/Cassandracreate" in /etc/nginx/nginx.conf:16
nginx: [emerg] no host in upstream "/PermissionPermissionBitMapper/viewset/Cassandracreate" in /etc/nginx/nginx.conf:16
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7fcf16860e20>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7fcf16860e20>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7fcf16860e20>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager'}
Try to assing a container
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f50f055ff40>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f50f055ff40>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f50f055ff40>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1587568153.791033
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1587568153.791033 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1587568153.791033 pythondocker_db_manager
f4913bbccedf2f60a504fec4e91e3b320c758a7a7709e84d892508af317b44cf
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1587568153.791033
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1587568153.791033', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1587568153.791033
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1587568153.791033', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1587568153.791033
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1587568153.791033', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1587568153.791033
None
[sudo] password for miworld_monitor: docker start db_manager1587568153.791033
db_manager1587568153.791033
in socket
{'NETWORK_INTERFACE': {'MONITOR_NET': '10.0.0.12', 'MANAGER_IN_NET': '14.0.0.12', 'MANAGER_OUT_NET': '15.0.0.12'}, 'NGINX': {'IN_NET': '14.0.0.2', 'OUT_NET': '15.0.0.2', 'url_type': 'mn_con'}}
{"NETWORK_INTERFACE":{"MONITOR_NET":"10.0.0.12","MANAGER_IN_NET":"14.0.0.12","MANAGER_OUT_NET":"15.0.0.12"},"NGINX":{"IN_NET":"14.0.0.2","OUT_NET":"15.0.0.2","url_type":"mn_con"}}
0 10.0.0.4 socket json http://10.0.0.12:10/get_task_from_monitor {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager', 'ip': '10.0.0.12'}
{'configes': [{'url': '/PermissionPermissionBitMapper/viewset/Cassandracreate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandracreate'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandraupdate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandraupdate'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandradelete', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandradelete'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandralist', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandralist'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandraretrieve', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandraretrieve'}], 'url_type': 'mn_con'}
scp -o StrictHostKeyChecking=no -i my_secreat temp_file.txt miworld_monitor@172.17.0.1:~/nginx_config_01.txt
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S cp nginx_config_01.txt /home/miworld_monitor/mn_con/nginx.conf"
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S python3 nginx_changer.py manager"
[sudo] password for miworld_monitor: [sudo] password for miworld_monitor: docker-compose exec manager nginx -s reload
[31mERROR[0m: Container d7b6ad8ed975345afccb5949431fe57d04e8c77bf5c7ac917962175cfabfa953 is restarting, wait until the container is running
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7fc57035ff10>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7fc57035ff10>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7fc57035ff10>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager'}
Try to assing a container
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7fa563074f40>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7fa563074f40>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7fa563074f40>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager'}
Try to assing a container
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f35a4edc940>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f35a4edc940>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f35a4edc940>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1603009713.890347
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1603009713.890347 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1603009713.890347 pythondocker_db_manager
b694a953263db8e0b62e14206ef3572ce50a9b100bc67480d180cb0b6185dfe9
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1603009713.890347
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1603009713.890347', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1603009713.890347
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1603009713.890347', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1603009713.890347
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1603009713.890347', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1603009713.890347
None
[sudo] password for miworld_monitor: docker start db_manager1603009713.890347
db_manager1603009713.890347
in socket
{'NETWORK_INTERFACE': {'MONITOR_NET': '10.0.0.12', 'MANAGER_IN_NET': '14.0.0.12', 'MANAGER_OUT_NET': '15.0.0.12'}, 'NGINX': {'IN_NET': '14.0.0.2', 'OUT_NET': '15.0.0.2', 'url_type': 'mn_con'}}
{"NETWORK_INTERFACE":{"MONITOR_NET":"10.0.0.12","MANAGER_IN_NET":"14.0.0.12","MANAGER_OUT_NET":"15.0.0.12"},"NGINX":{"IN_NET":"14.0.0.2","OUT_NET":"15.0.0.2","url_type":"mn_con"}}
0 10.0.0.4 socket json http://10.0.0.12:10/get_task_from_monitor {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager', 'ip': '10.0.0.12'}
{'configes': [{'url': '/PermissionPermissionBitMapper/viewset/Cassandracreate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandracreate'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandraupdate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandraupdate'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandradelete', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandradelete'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandralist', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandralist'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandraretrieve', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandraretrieve'}], 'url_type': 'mn_con'}
scp -o StrictHostKeyChecking=no -i my_secreat temp_file.txt miworld_monitor@172.17.0.1:~/nginx_config_01.txt
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S cp nginx_config_01.txt /home/miworld_monitor/mn_con/nginx.conf"
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S python3 nginx_changer.py manager"
[sudo] password for miworld_monitor: [sudo] password for miworld_monitor: docker-compose exec manager nginx -s reload
[31mERROR[0m: Container d7b6ad8ed975345afccb5949431fe57d04e8c77bf5c7ac917962175cfabfa953 is restarting, wait until the container is running
in socket
{'NETWORK_INTERFACE': {'MONITOR_NET': '10.0.0.12', 'MANAGER_IN_NET': '14.0.0.12', 'MANAGER_OUT_NET': '15.0.0.12'}, 'NGINX': {'IN_NET': '14.0.0.2', 'OUT_NET': '15.0.0.2', 'url_type': 'mn_con'}}
{"NETWORK_INTERFACE":{"MONITOR_NET":"10.0.0.12","MANAGER_IN_NET":"14.0.0.12","MANAGER_OUT_NET":"15.0.0.12"},"NGINX":{"IN_NET":"14.0.0.2","OUT_NET":"15.0.0.2","url_type":"mn_con"}}
0 10.0.0.4 socket json http://10.0.0.12:10/get_task_from_monitor {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager', 'ip': '10.0.0.12', 'port': 11}
{'configes': [{'url': '/PermissionPermissionBitMapper/viewset/Cassandracreate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandracreate'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandraupdate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandraupdate'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandradelete', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandradelete'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandralist', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandralist'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandraretrieve', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandraretrieve'}], 'url_type': 'mn_con'}
scp -o StrictHostKeyChecking=no -i my_secreat temp_file.txt miworld_monitor@172.17.0.1:~/nginx_config_01.txt
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S cp nginx_config_01.txt /home/miworld_monitor/mn_con/nginx.conf"
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S python3 nginx_changer.py manager"
[sudo] password for miworld_monitor: [sudo] password for miworld_monitor: docker-compose exec manager nginx -s reload
[31mERROR[0m: Container d7b6ad8ed975345afccb5949431fe57d04e8c77bf5c7ac917962175cfabfa953 is restarting, wait until the container is running
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7fe0f558f850>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7fe0f558f850>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7fe0f558f850>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager'}
Try to assing a container
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7eff10dc69d0>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7eff10dc69d0>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7eff10dc69d0>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager'}
Try to assing a container
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f6cca3042b0>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f6cca3042b0>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f6cca3042b0>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager'}
Try to assing a container
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f4d703c6730>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f4d703c6730>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f4d703c6730>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager'}
Try to assing a container
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f340d506e20>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f340d506e20>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f340d506e20>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager'}
Try to assing a container
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7fd34782ff40>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7fd34782ff40>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7fd34782ff40>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager'}
Try to assing a container
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f3eb05d19a0>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f3eb05d19a0>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f3eb05d19a0>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager'}
Try to assing a container
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f66922f10d0>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f66922f10d0>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f66922f10d0>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1603992341.817357
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1603992341.817357 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1603992341.817357 pythondocker_db_manager
ba9572044fd72a54bbc787f1ff8ff7271dfaaaae4adefee46dce34e9c54b7566
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1603992341.817357
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1603992341.817357', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1603992341.817357
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1603992341.817357', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1603992341.817357
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1603992341.817357', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1603992341.817357
None
[sudo] password for miworld_monitor: docker start db_manager1603992341.817357
db_manager1603992341.817357
in socket
{'NETWORK_INTERFACE': {'MONITOR_NET': '10.0.0.12', 'MANAGER_IN_NET': '14.0.0.12', 'MANAGER_OUT_NET': '15.0.0.12'}, 'NGINX': {'IN_NET': '14.0.0.2', 'OUT_NET': '15.0.0.2', 'url_type': 'mn_con'}}
{"NETWORK_INTERFACE":{"MONITOR_NET":"10.0.0.12","MANAGER_IN_NET":"14.0.0.12","MANAGER_OUT_NET":"15.0.0.12"},"NGINX":{"IN_NET":"14.0.0.2","OUT_NET":"15.0.0.2","url_type":"mn_con"}}
0 10.0.0.4 socket json http://10.0.0.12:10/get_task_from_monitor {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager', 'ip': '10.0.0.12'}
{'configes': [{'url': '/PermissionPermissionBitMapper/viewset/Cassandracreate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandracreate'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandraupdate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandraupdate'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandradelete', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandradelete'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandralist', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandralist'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandraretrieve', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandraretrieve'}], 'url_type': 'mn_con'}
scp -o StrictHostKeyChecking=no -i my_secreat temp_file.txt miworld_monitor@172.17.0.1:~/nginx_config_01.txt
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S cp nginx_config_01.txt /home/miworld_monitor/mn_con/nginx.conf"
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S python3 nginx_changer.py manager"
[sudo] password for miworld_monitor: [sudo] password for miworld_monitor: docker-compose exec manager nginx -s reload
[31mERROR[0m: Container d7b6ad8ed975345afccb5949431fe57d04e8c77bf5c7ac917962175cfabfa953 is restarting, wait until the container is running
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f2b7ac97310>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f2b7ac97310>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f2b7ac97310>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager'}
Try to assing a container
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f0aa65b32e0>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f0aa65b32e0>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f0aa65b32e0>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1604036227.245271
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1604036227.245271 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1604036227.245271 pythondocker_db_manager
8975e54d4416c1fa64a4a17e960b5ed0a7fe7c4e0be727322e0ac0182a20d17c
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1604036227.245271
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604036227.245271', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1604036227.245271
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604036227.245271', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1604036227.245271
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604036227.245271', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1604036227.245271
None
[sudo] password for miworld_monitor: docker start db_manager1604036227.245271
db_manager1604036227.245271
in socket
{'NETWORK_INTERFACE': {'MONITOR_NET': '10.0.0.12', 'MANAGER_IN_NET': '14.0.0.12', 'MANAGER_OUT_NET': '15.0.0.12'}, 'NGINX': {'IN_NET': '14.0.0.2', 'OUT_NET': '15.0.0.2', 'url_type': 'mn_con'}}
{"NETWORK_INTERFACE":{"MONITOR_NET":"10.0.0.12","MANAGER_IN_NET":"14.0.0.12","MANAGER_OUT_NET":"15.0.0.12"},"NGINX":{"IN_NET":"14.0.0.2","OUT_NET":"15.0.0.2","url_type":"mn_con"}}
0 10.0.0.4 socket json http://10.0.0.12:10/get_task_from_monitor {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager', 'ip': '10.0.0.12'}
{'configes': [{'url': '/PermissionPermissionBitMapper/viewset/Cassandracreate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandracreate'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandraupdate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandraupdate'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandradelete', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandradelete'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandralist', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandralist'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandraretrieve', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandraretrieve'}], 'url_type': 'mn_con'}
scp -o StrictHostKeyChecking=no -i my_secreat temp_file.txt miworld_monitor@172.17.0.1:~/nginx_config_01.txt
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S cp nginx_config_01.txt /home/miworld_monitor/mn_con/nginx.conf"
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S python3 nginx_changer.py manager"
[sudo] password for miworld_monitor: [sudo] password for miworld_monitor: docker-compose exec manager nginx -s reload
[31mERROR[0m: Container d7b6ad8ed975345afccb5949431fe57d04e8c77bf5c7ac917962175cfabfa953 is restarting, wait until the container is running
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f85140d0730>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f85140d0730>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f85140d0730>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1604038174.434312
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1604038174.434312 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1604038174.434312 pythondocker_db_manager
d834e99b983cbd9e6a900f14b3e8f1fa48820b42c9ca1a3f7cc227435b0bab2d
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1604038174.434312
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604038174.434312', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1604038174.434312
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604038174.434312', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1604038174.434312
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604038174.434312', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1604038174.434312
None
[sudo] password for miworld_monitor: docker start db_manager1604038174.434312
Error response from daemon: Address already in use
Error: failed to start containers: db_manager1604038174.434312
makefile:18: recipe for target 'run' failed
make: *** [run] Error 1
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f0076253970>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f0076253970>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f0076253970>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1604058176.119398
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1604058176.119398 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1604058176.119398 pythondocker_db_manager
9855037950ac65044605b899ea425d7eb9ed4a973a7c511c387682ee342450f7
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1604058176.119398
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604058176.119398', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1604058176.119398
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604058176.119398', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1604058176.119398
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604058176.119398', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1604058176.119398
None
[sudo] password for miworld_monitor: docker start db_manager1604058176.119398
Error response from daemon: Address already in use
Error: failed to start containers: db_manager1604058176.119398
makefile:18: recipe for target 'run' failed
make: *** [run] Error 1
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7fd5a4c287f0>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7fd5a4c287f0>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7fd5a4c287f0>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager'}
Try to assing a container
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f2ed9bdf370>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f2ed9bdf370>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f2ed9bdf370>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager'}
Try to assing a container
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f508c1ecac0>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f508c1ecac0>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f508c1ecac0>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1604080523.672575
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1604080523.672575 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1604080523.672575 pythondocker_db_manager
543b093ae42e23d2c2c76bd47b991277ee2e44be98f73d8f02efecda52ff85b9
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1604080523.672575
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604080523.672575', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1604080523.672575
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604080523.672575', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1604080523.672575
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604080523.672575', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1604080523.672575
None
[sudo] password for miworld_monitor: docker start db_manager1604080523.672575
db_manager1604080523.672575
in socket
{'NETWORK_INTERFACE': {'MONITOR_NET': '10.0.0.12', 'MANAGER_IN_NET': '14.0.0.12', 'MANAGER_OUT_NET': '15.0.0.12'}, 'NGINX': {'IN_NET': '14.0.0.2', 'OUT_NET': '15.0.0.2', 'url_type': 'mn_con'}}
{"NETWORK_INTERFACE":{"MONITOR_NET":"10.0.0.12","MANAGER_IN_NET":"14.0.0.12","MANAGER_OUT_NET":"15.0.0.12"},"NGINX":{"IN_NET":"14.0.0.2","OUT_NET":"15.0.0.2","url_type":"mn_con"}}
0 10.0.0.4 socket json http://10.0.0.12:10/get_task_from_monitor {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager', 'ip': '10.0.0.12'}
{'configes': [{'url': '/PermissionPermissionBitMapper/viewset/Cassandracreate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandracreate'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandraupdate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandraupdate'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandradelete', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandradelete'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandralist', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandralist'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandraretrieve', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandraretrieve'}], 'url_type': 'mn_con'}
scp -o StrictHostKeyChecking=no -i my_secreat temp_file.txt miworld_monitor@172.17.0.1:~/nginx_config_01.txt
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S cp nginx_config_01.txt /home/miworld_monitor/mn_con/nginx.conf"
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S python3 nginx_changer.py manager"
[sudo] password for miworld_monitor: [sudo] password for miworld_monitor: docker-compose exec manager nginx -s reload
[31mERROR[0m: Container d7b6ad8ed975345afccb5949431fe57d04e8c77bf5c7ac917962175cfabfa953 is restarting, wait until the container is running
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f4b0b782f40>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f4b0b782f40>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f4b0b782f40>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1604084223.493862
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1604084223.493862 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1604084223.493862 pythondocker_db_manager
0d7bd5c6144de7f7342eb34abe1bcfb62b1f1321fa2388f058c90cf17fbeab1f
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1604084223.493862
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604084223.493862', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1604084223.493862
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604084223.493862', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1604084223.493862
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604084223.493862', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1604084223.493862
None
[sudo] password for miworld_monitor: docker start db_manager1604084223.493862
db_manager1604084223.493862
in socket
{'NETWORK_INTERFACE': {'MONITOR_NET': '10.0.0.12', 'MANAGER_IN_NET': '14.0.0.12', 'MANAGER_OUT_NET': '15.0.0.12'}, 'NGINX': {'IN_NET': '14.0.0.2', 'OUT_NET': '15.0.0.2', 'url_type': 'mn_con'}}
{"NETWORK_INTERFACE":{"MONITOR_NET":"10.0.0.12","MANAGER_IN_NET":"14.0.0.12","MANAGER_OUT_NET":"15.0.0.12"},"NGINX":{"IN_NET":"14.0.0.2","OUT_NET":"15.0.0.2","url_type":"mn_con"}}
0 10.0.0.4 socket json http://10.0.0.12:10/get_task_from_monitor {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager', 'ip': '10.0.0.12'}
{'configes': [{'url': '/PermissionPermissionBitMapper/viewset/Cassandracreate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandracreate'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandraupdate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandraupdate'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandradelete', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandradelete'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandralist', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandralist'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandraretrieve', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandraretrieve'}], 'url_type': 'mn_con'}
scp -o StrictHostKeyChecking=no -i my_secreat temp_file.txt miworld_monitor@172.17.0.1:~/nginx_config_01.txt
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S cp nginx_config_01.txt /home/miworld_monitor/mn_con/nginx.conf"
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S python3 nginx_changer.py manager"
[sudo] password for miworld_monitor: [sudo] password for miworld_monitor: docker-compose exec manager nginx -s reload
[31mERROR[0m: Container d7b6ad8ed975345afccb5949431fe57d04e8c77bf5c7ac917962175cfabfa953 is restarting, wait until the container is running
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f0e39285610>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f0e39285610>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f0e39285610>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperPostgresqlViewset', 'name_space': 'PermissionPermissionBitMapper.Postgresql_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1604085357.14502
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1604085357.14502 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1604085357.14502 pythondocker_db_manager
9b8e193b1d94e2ede9d54213e0373e7bfb6bd911d682334dd441388b92f67e0f
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1604085357.14502
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604085357.14502', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1604085357.14502
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604085357.14502', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1604085357.14502
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604085357.14502', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1604085357.14502
None
[sudo] password for miworld_monitor: docker start db_manager1604085357.14502
db_manager1604085357.14502
in socket
{'NETWORK_INTERFACE': {'MONITOR_NET': '10.0.0.12', 'MANAGER_IN_NET': '14.0.0.12', 'MANAGER_OUT_NET': '15.0.0.12'}, 'NGINX': {'IN_NET': '14.0.0.2', 'OUT_NET': '15.0.0.2', 'url_type': 'mn_con'}}
{"NETWORK_INTERFACE":{"MONITOR_NET":"10.0.0.12","MANAGER_IN_NET":"14.0.0.12","MANAGER_OUT_NET":"15.0.0.12"},"NGINX":{"IN_NET":"14.0.0.2","OUT_NET":"15.0.0.2","url_type":"mn_con"}}
0 10.0.0.4 socket json http://10.0.0.12:10/get_task_from_monitor {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperPostgresqlViewset', 'name_space': 'PermissionPermissionBitMapper.Postgresql_viewset', 'container_type': 'db_manager', 'ip': '10.0.0.12'}
{'configes': [{'url': '/PermissionPermissionBitMapper/viewset/Postgresqlcreate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Postgresqlcreate'}, {'url': '/PermissionPermissionBitMapper/viewset/Postgresqlupdate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Postgresqlupdate'}, {'url': '/PermissionPermissionBitMapper/viewset/Postgresqldelete', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Postgresqldelete'}, {'url': '/PermissionPermissionBitMapper/viewset/Postgresqllist', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Postgresqllist'}, {'url': '/PermissionPermissionBitMapper/viewset/Postgresqlretrieve', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Postgresqlretrieve'}], 'url_type': 'mn_con'}
scp -o StrictHostKeyChecking=no -i my_secreat temp_file.txt miworld_monitor@172.17.0.1:~/nginx_config_01.txt
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S cp nginx_config_01.txt /home/miworld_monitor/mn_con/nginx.conf"
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S python3 nginx_changer.py manager"
[sudo] password for miworld_monitor: [sudo] password for miworld_monitor: docker-compose exec manager nginx -s reload
[31mERROR[0m: Container d7b6ad8ed975345afccb5949431fe57d04e8c77bf5c7ac917962175cfabfa953 is restarting, wait until the container is running
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f494231a610>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f494231a610>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f494231a610>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperPostgresqlViewset', 'name_space': 'PermissionPermissionBitMapper.Postgresql_viewset', 'container_type': 'db_manager'}
Try to assing a container
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f2d35d2fe20>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f2d35d2fe20>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f2d35d2fe20>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperPostgresqlViewset', 'name_space': 'PermissionPermissionBitMapper.Postgresql_viewset', 'container_type': 'db_manager'}
Try to assing a container
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f179d5f6370>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f179d5f6370>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f179d5f6370>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperPostgresqlViewset', 'name_space': 'PermissionPermissionBitMapper.Postgresql_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1604130312.452349
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1604130312.452349 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1604130312.452349 pythondocker_db_manager
dc053a26eea0d02a2825905143a25b224a7b26b77722360e987a5195f2ab22c4
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1604130312.452349
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604130312.452349', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1604130312.452349
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604130312.452349', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1604130312.452349
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604130312.452349', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1604130312.452349
None
[sudo] password for miworld_monitor: docker start db_manager1604130312.452349
db_manager1604130312.452349
in socket
{'NETWORK_INTERFACE': {'MONITOR_NET': '10.0.0.12', 'MANAGER_IN_NET': '14.0.0.12', 'MANAGER_OUT_NET': '15.0.0.12'}, 'NGINX': {'IN_NET': '14.0.0.2', 'OUT_NET': '15.0.0.2', 'url_type': 'mn_con'}}
{"NETWORK_INTERFACE":{"MONITOR_NET":"10.0.0.12","MANAGER_IN_NET":"14.0.0.12","MANAGER_OUT_NET":"15.0.0.12"},"NGINX":{"IN_NET":"14.0.0.2","OUT_NET":"15.0.0.2","url_type":"mn_con"}}
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager'}
Try to assing a container
0 10.0.0.4 socket json http://10.0.0.12:10/get_task_from_monitor {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperPostgresqlViewset', 'name_space': 'PermissionPermissionBitMapper.Postgresql_viewset', 'container_type': 'db_manager', 'ip': '10.0.0.12'}
{'configes': [{'url': '/PermissionPermissionBitMapper/viewset/Postgresqlcreate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Postgresqlcreate'}, {'url': '/PermissionPermissionBitMapper/viewset/Postgresqlupdate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Postgresqlupdate'}, {'url': '/PermissionPermissionBitMapper/viewset/Postgresqldelete', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Postgresqldelete'}, {'url': '/PermissionPermissionBitMapper/viewset/Postgresqllist', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Postgresqllist'}, {'url': '/PermissionPermissionBitMapper/viewset/Postgresqlretrieve', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Postgresqlretrieve'}], 'url_type': 'mn_con'}
scp -o StrictHostKeyChecking=no -i my_secreat temp_file.txt miworld_monitor@172.17.0.1:~/nginx_config_01.txt
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S cp nginx_config_01.txt /home/miworld_monitor/mn_con/nginx.conf"
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S python3 nginx_changer.py manager"
[sudo] password for miworld_monitor: [sudo] password for miworld_monitor: docker-compose exec manager nginx -s reload
[31mERROR[0m: Container d7b6ad8ed975345afccb5949431fe57d04e8c77bf5c7ac917962175cfabfa953 is restarting, wait until the container is running
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7fd08ce04610>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7fd08ce04610>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7fd08ce04610>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1604130893.063449
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1604130893.063449 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1604130893.063449 pythondocker_db_manager
bccce8345e387755fc3815e485a44957c43659f21564f33982d9208a9526dc25
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1604130893.063449
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604130893.063449', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1604130893.063449
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604130893.063449', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1604130893.063449
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604130893.063449', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1604130893.063449
None
[sudo] password for miworld_monitor: docker start db_manager1604130893.063449
Error response from daemon: Address already in use
Error: failed to start containers: db_manager1604130893.063449
makefile:18: recipe for target 'run' failed
make: *** [run] Error 1
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperPostgresqlViewset', 'name_space': 'PermissionPermissionBitMapper.Postgresql_viewset', 'container_type': 'db_manager'}
Try to assing a container
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7fd0e6f8a610>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7fd0e6f8a610>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7fd0e6f8a610>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
task  {'service_models': 'UI', 'class_name': 'PermissionPermission.Redis_viewset', 'name_space': 'PermissionPermission.Redis_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1604132140.871094
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1604132140.871094 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1604132140.871094 pythondocker_db_manager
49c175d429b5fe489e350ac0ac995a8901b628bf7523d7282adf27e67269ec6e
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1604132140.871094
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604132140.871094', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1604132140.871094
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604132140.871094', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1604132140.871094
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604132140.871094', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1604132140.871094
None
[sudo] password for miworld_monitor: docker start db_manager1604132140.871094
Error response from daemon: Address already in use
Error: failed to start containers: db_manager1604132140.871094
makefile:18: recipe for target 'run' failed
make: *** [run] Error 1
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f85fe95e970>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f85fe95e970>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f85fe95e970>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1604132706.399334
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1604132706.399334 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1604132706.399334 pythondocker_db_manager
9666f61259607bd7dd939bfdef5abad8116616a2c5694c39396b02c0e889c20c
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1604132706.399334
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604132706.399334', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1604132706.399334
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604132706.399334', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1604132706.399334
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604132706.399334', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1604132706.399334
None
[sudo] password for miworld_monitor: docker start db_manager1604132706.399334
Error response from daemon: Address already in use
Error: failed to start containers: db_manager1604132706.399334
makefile:18: recipe for target 'run' failed
make: *** [run] Error 1
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f35a83363d0>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f35a83363d0>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f35a83363d0>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1604132918.073657
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1604132918.073657 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1604132918.073657 pythondocker_db_manager
de00bc9b98ea69ad9e55bbfc21b0469716b3983c22ef2e88136c3fb00eabc1a6
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1604132918.073657
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604132918.073657', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1604132918.073657
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604132918.073657', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1604132918.073657
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604132918.073657', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1604132918.073657
None
[sudo] password for miworld_monitor: docker start db_manager1604132918.073657
Error response from daemon: Address already in use
Error: failed to start containers: db_manager1604132918.073657
makefile:18: recipe for target 'run' failed
make: *** [run] Error 1
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperRedisViewset', 'name_space': 'PermissionPermissionBitMapper.Redis_viewset', 'container_type': 'db_manager'}
Try to assing a container
in socket
{'NETWORK_INTERFACE': {'MONITOR_NET': '10.0.0.12', 'MANAGER_IN_NET': '14.0.0.12', 'MANAGER_OUT_NET': '15.0.0.12'}, 'NGINX': {'IN_NET': '14.0.0.2', 'OUT_NET': '15.0.0.2', 'url_type': 'mn_con'}}
{"NETWORK_INTERFACE":{"MONITOR_NET":"10.0.0.12","MANAGER_IN_NET":"14.0.0.12","MANAGER_OUT_NET":"15.0.0.12"},"NGINX":{"IN_NET":"14.0.0.2","OUT_NET":"15.0.0.2","url_type":"mn_con"}}
0 10.0.0.4 socket json http://10.0.0.12:10/get_task_from_monitor {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager', 'ip': '10.0.0.12'}
{'configes': [{'url': '/PermissionPermissionBitMapper/viewset/Cassandracreate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandracreate'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandraupdate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandraupdate'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandradelete', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandradelete'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandralist', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandralist'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandraretrieve', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandraretrieve'}], 'url_type': 'mn_con'}
scp -o StrictHostKeyChecking=no -i my_secreat temp_file.txt miworld_monitor@172.17.0.1:~/nginx_config_01.txt
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S cp nginx_config_01.txt /home/miworld_monitor/mn_con/nginx.conf"
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S python3 nginx_changer.py manager"
[sudo] password for miworld_monitor: [sudo] password for miworld_monitor: docker-compose exec manager nginx -s reload
[31mERROR[0m: Container d7b6ad8ed975345afccb5949431fe57d04e8c77bf5c7ac917962175cfabfa953 is restarting, wait until the container is running
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f0e462da610>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f0e462da610>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f0e462da610>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1604133647.501624
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1604133647.501624 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1604133647.501624 pythondocker_db_manager
5bc3a6d64c2d3ec4325cb018aa08e0cc24055611f419ec9ea8387b99649fa53b
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1604133647.501624
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604133647.501624', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1604133647.501624
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604133647.501624', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1604133647.501624
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604133647.501624', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1604133647.501624
None
[sudo] password for miworld_monitor: docker start db_manager1604133647.501624
Error response from daemon: Address already in use
Error: failed to start containers: db_manager1604133647.501624
makefile:18: recipe for target 'run' failed
make: *** [run] Error 1
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperPostgresqlViewset', 'name_space': 'PermissionPermissionBitMapper.Postgresql_viewset', 'container_type': 'db_manager'}
Try to assing a container
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f688a916be0>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f688a916be0>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f688a916be0>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager'}
Try to assing a container
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f0a201cc730>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f0a201cc730>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f0a201cc730>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1604216164.213957
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1604216164.213957 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1604216164.213957 pythondocker_db_manager
a21244291599b9f1915828a4f0e3dbf0ad3fd56da006b3c09a5c57ebef33f8ae
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1604216164.213957
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604216164.213957', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1604216164.213957
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604216164.213957', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1604216164.213957
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604216164.213957', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1604216164.213957
None
[sudo] password for miworld_monitor: docker start db_manager1604216164.213957
db_manager1604216164.213957
in socket
{'NETWORK_INTERFACE': {'MONITOR_NET': '10.0.0.12', 'MANAGER_IN_NET': '14.0.0.12', 'MANAGER_OUT_NET': '15.0.0.12'}, 'NGINX': {'IN_NET': '14.0.0.2', 'OUT_NET': '15.0.0.2', 'url_type': 'mn_con'}}
{"NETWORK_INTERFACE":{"MONITOR_NET":"10.0.0.12","MANAGER_IN_NET":"14.0.0.12","MANAGER_OUT_NET":"15.0.0.12"},"NGINX":{"IN_NET":"14.0.0.2","OUT_NET":"15.0.0.2","url_type":"mn_con"}}
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperPostgresqlViewset', 'name_space': 'PermissionPermissionBitMapper.Postgresql_viewset', 'container_type': 'db_manager'}
Try to assing a container
0 10.0.0.4 socket json http://10.0.0.12:10/get_task_from_monitor {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager', 'ip': '10.0.0.12'}
{'configes': [{'url': '/PermissionPermissionBitMapper/viewset/Cassandracreate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandracreate'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandraupdate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandraupdate'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandradelete', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandradelete'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandralist', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandralist'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandraretrieve', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandraretrieve'}], 'url_type': 'mn_con'}
scp -o StrictHostKeyChecking=no -i my_secreat temp_file.txt miworld_monitor@172.17.0.1:~/nginx_config_01.txt
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S cp nginx_config_01.txt /home/miworld_monitor/mn_con/nginx.conf"
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S python3 nginx_changer.py manager"
[sudo] password for miworld_monitor: [sudo] password for miworld_monitor: docker-compose exec manager nginx -s reload
[31mERROR[0m: Container d7b6ad8ed975345afccb5949431fe57d04e8c77bf5c7ac917962175cfabfa953 is restarting, wait until the container is running
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f72f4434f40>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f72f4434f40>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f72f4434f40>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1604335240.811392
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1604335240.811392 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1604335240.811392 pythondocker_db_manager
b2ed17a713b6f24e79f7cf5485736d10789bdafd8a152d5f812d15c2292e05b5
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1604335240.811392
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604335240.811392', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1604335240.811392
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604335240.811392', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1604335240.811392
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604335240.811392', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1604335240.811392
None
[sudo] password for miworld_monitor: docker start db_manager1604335240.811392
db_manager1604335240.811392
in socket
{'NETWORK_INTERFACE': {'MONITOR_NET': '10.0.0.12', 'MANAGER_IN_NET': '14.0.0.12', 'MANAGER_OUT_NET': '15.0.0.12'}, 'NGINX': {'IN_NET': '14.0.0.2', 'OUT_NET': '15.0.0.2', 'url_type': 'mn_con'}}
{"NETWORK_INTERFACE":{"MONITOR_NET":"10.0.0.12","MANAGER_IN_NET":"14.0.0.12","MANAGER_OUT_NET":"15.0.0.12"},"NGINX":{"IN_NET":"14.0.0.2","OUT_NET":"15.0.0.2","url_type":"mn_con"}}
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperPostgresqlViewset', 'name_space': 'PermissionPermissionBitMapper.Postgresql_viewset', 'container_type': 'db_manager'}
Try to assing a container
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f6f1a4d80d0>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f6f1a4d80d0>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f6f1a4d80d0>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager'}
Try to assing a container
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7fcec7b5d640>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7fcec7b5d640>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7fcec7b5d640>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1604341592.366963
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1604341592.366963 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1604341592.366963 pythondocker_db_manager
0bcae0ce0b31fa945c0d12d102b7424e935ea94cc5619d3b1c2849c838eaa94a
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1604341592.366963
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604341592.366963', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1604341592.366963
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604341592.366963', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1604341592.366963
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604341592.366963', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1604341592.366963
None
[sudo] password for miworld_monitor: docker start db_manager1604341592.366963
Error response from daemon: Address already in use
Error: failed to start containers: db_manager1604341592.366963
makefile:18: recipe for target 'run' failed
make: *** [run] Error 1
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperPostgresqlViewset', 'name_space': 'PermissionPermissionBitMapper.Postgresql_viewset', 'container_type': 'db_manager'}
Try to assing a container
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7fd3cd196730>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7fd3cd196730>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7fd3cd196730>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1604342465.756849
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1604342465.756849 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1604342465.756849 pythondocker_db_manager
bb1f6facc6d5186ec0fea929a48b01ffc1330bc0c837be1f38ad6293e58427d5
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1604342465.756849
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604342465.756849', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1604342465.756849
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604342465.756849', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1604342465.756849
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604342465.756849', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1604342465.756849
None
[sudo] password for miworld_monitor: docker start db_manager1604342465.756849
Error response from daemon: Address already in use
Error: failed to start containers: db_manager1604342465.756849
makefile:18: recipe for target 'run' failed
make: *** [run] Error 1
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7fc0606f5970>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7fc0606f5970>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7fc0606f5970>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1604342893.010067
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1604342893.010067 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1604342893.010067 pythondocker_db_manager
aeb6a60fbc1a3159f7185eba0d33b86b1a20ed4fe12bac57d499191217c5cf26
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1604342893.010067
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604342893.010067', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1604342893.010067
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604342893.010067', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1604342893.010067
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604342893.010067', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1604342893.010067
None
[sudo] password for miworld_monitor: docker start db_manager1604342893.010067
Error response from daemon: Address already in use
Error: failed to start containers: db_manager1604342893.010067
makefile:18: recipe for target 'run' failed
make: *** [run] Error 1
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperPostgresqlViewset', 'name_space': 'PermissionPermissionBitMapper.Postgresql_viewset', 'container_type': 'db_manager'}
Try to assing a container
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f6024b4fbb0>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f6024b4fbb0>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f6024b4fbb0>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1604343637.970492
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1604343637.970492 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1604343637.970492 pythondocker_db_manager
032ff488550729c9e4a8ff743bd2170cc89325669c6d739dc3c570f473c192ba
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1604343637.970492
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604343637.970492', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1604343637.970492
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604343637.970492', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1604343637.970492
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604343637.970492', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1604343637.970492
None
[sudo] password for miworld_monitor: docker start db_manager1604343637.970492
Error response from daemon: Address already in use
Error: failed to start containers: db_manager1604343637.970492
makefile:18: recipe for target 'run' failed
make: *** [run] Error 1
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperPostgresqlViewset', 'name_space': 'PermissionPermissionBitMapper.Postgresql_viewset', 'container_type': 'db_manager'}
Try to assing a container
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7fa702a1b610>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7fa702a1b610>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7fa702a1b610>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager'}
Try to assing a container
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f1b595ac6d0>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f1b595ac6d0>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f1b595ac6d0>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager'}
Try to assing a container
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f2b1cd31e20>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f2b1cd31e20>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f2b1cd31e20>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1604387588.569336
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1604387588.569336 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1604387588.569336 pythondocker_db_manager
a7a28fb9db1db82ed0fcaea739dfc8fac900a37e54694b70213f0a513012eff2
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1604387588.569336
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604387588.569336', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1604387588.569336
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604387588.569336', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1604387588.569336
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604387588.569336', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1604387588.569336
None
[sudo] password for miworld_monitor: docker start db_manager1604387588.569336
db_manager1604387588.569336
in socket
{'NETWORK_INTERFACE': {'MONITOR_NET': '10.0.0.12', 'MANAGER_IN_NET': '14.0.0.12', 'MANAGER_OUT_NET': '15.0.0.12'}, 'NGINX': {'IN_NET': '14.0.0.2', 'OUT_NET': '15.0.0.2', 'url_type': 'mn_con'}}
{"NETWORK_INTERFACE":{"MONITOR_NET":"10.0.0.12","MANAGER_IN_NET":"14.0.0.12","MANAGER_OUT_NET":"15.0.0.12"},"NGINX":{"IN_NET":"14.0.0.2","OUT_NET":"15.0.0.2","url_type":"mn_con"}}
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperPostgresqlViewset', 'name_space': 'PermissionPermissionBitMapper.Postgresql_viewset', 'container_type': 'db_manager'}
Try to assing a container
0 10.0.0.4 socket json http://10.0.0.12:10/get_task_from_monitor {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager', 'ip': '10.0.0.12'}
{'configes': [{'url': '/PermissionPermissionBitMapper/viewset/Cassandracreate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandracreate'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandraupdate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandraupdate'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandradelete', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandradelete'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandralist', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandralist'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandraretrieve', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandraretrieve'}], 'url_type': 'mn_con'}
scp -o StrictHostKeyChecking=no -i my_secreat temp_file.txt miworld_monitor@172.17.0.1:~/nginx_config_01.txt
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S cp nginx_config_01.txt /home/miworld_monitor/mn_con/nginx.conf"
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S python3 nginx_changer.py manager"
[sudo] password for miworld_monitor: [sudo] password for miworld_monitor: docker-compose exec manager nginx -s reload
[31mERROR[0m: Container d7b6ad8ed975345afccb5949431fe57d04e8c77bf5c7ac917962175cfabfa953 is restarting, wait until the container is running
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f8fe7bdf340>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f8fe7bdf340>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f8fe7bdf340>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1604391320.855983
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1604391320.855983 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1604391320.855983 pythondocker_db_manager
c6ae2aeabd0cd5550f91cfce04472fddfb1781230a8b491e4c77dea9b9659971
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1604391320.855983
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604391320.855983', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1604391320.855983
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604391320.855983', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1604391320.855983
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604391320.855983', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1604391320.855983
None
[sudo] password for miworld_monitor: docker start db_manager1604391320.855983
Error response from daemon: Address already in use
Error: failed to start containers: db_manager1604391320.855983
makefile:18: recipe for target 'run' failed
make: *** [run] Error 1
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperPostgresqlViewset', 'name_space': 'PermissionPermissionBitMapper.Postgresql_viewset', 'container_type': 'db_manager'}
Try to assing a container
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f9ed7ef8640>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f9ed7ef8640>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f9ed7ef8640>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
task  {'service_models': 'UI', 'class_name': 'LikeViewSet', 'name_space': 'likes_api.like_api_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1604391391.548608
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1604391391.548608 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1604391391.548608 pythondocker_db_manager
94d646bda7adfd0f9863779d0128a28e45fd03ee863751fcf369a92bb13c0b8a
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1604391391.548608
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604391391.548608', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1604391391.548608
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604391391.548608', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1604391391.548608
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604391391.548608', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1604391391.548608
None
[sudo] password for miworld_monitor: docker start db_manager1604391391.548608
Error response from daemon: Address already in use
Error: failed to start containers: db_manager1604391391.548608
makefile:18: recipe for target 'run' failed
make: *** [run] Error 1
in socket
{'NETWORK_INTERFACE': {'MONITOR_NET': '10.0.0.12', 'MANAGER_IN_NET': '14.0.0.12', 'MANAGER_OUT_NET': '15.0.0.12'}, 'NGINX': {'IN_NET': '14.0.0.2', 'OUT_NET': '15.0.0.2', 'url_type': 'mn_con'}}
{"NETWORK_INTERFACE":{"MONITOR_NET":"10.0.0.12","MANAGER_IN_NET":"14.0.0.12","MANAGER_OUT_NET":"15.0.0.12"},"NGINX":{"IN_NET":"14.0.0.2","OUT_NET":"15.0.0.2","url_type":"mn_con"}}
0 10.0.0.4 socket json http://10.0.0.12:10/get_task_from_monitor {'service_models': 'UI', 'class_name': 'LikeViewSet', 'name_space': 'likes_api.like_api_viewset', 'container_type': 'db_manager', 'ip': '10.0.0.12'}
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7fbadf35f3a0>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7fbadf35f3a0>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7fbadf35f3a0>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
task  {'service_models': 'UI', 'class_name': 'LikeViewSet', 'name_space': 'likes_api.like_api_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1604392448.406707
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1604392448.406707 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1604392448.406707 pythondocker_db_manager
ce3bbd3da60125d3e2ed99f2e6698d4c63062e1088178d08de631943f37f3293
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1604392448.406707
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604392448.406707', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1604392448.406707
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604392448.406707', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1604392448.406707
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604392448.406707', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1604392448.406707
None
[sudo] password for miworld_monitor: docker start db_manager1604392448.406707
db_manager1604392448.406707
in socket
{'NETWORK_INTERFACE': {'MONITOR_NET': '10.0.0.12', 'MANAGER_IN_NET': '14.0.0.12', 'MANAGER_OUT_NET': '15.0.0.12'}, 'NGINX': {'IN_NET': '14.0.0.2', 'OUT_NET': '15.0.0.2', 'url_type': 'mn_con'}}
{"NETWORK_INTERFACE":{"MONITOR_NET":"10.0.0.12","MANAGER_IN_NET":"14.0.0.12","MANAGER_OUT_NET":"15.0.0.12"},"NGINX":{"IN_NET":"14.0.0.2","OUT_NET":"15.0.0.2","url_type":"mn_con"}}
task  {'service_models': 'UI', 'class_name': 'PostViewset', 'name_space': 'posts_api.post_viewset', 'container_type': 'db_manager'}
Try to assing a container
0 10.0.0.4 socket json http://10.0.0.12:10/get_task_from_monitor {'service_models': 'UI', 'class_name': 'LikeViewSet', 'name_space': 'likes_api.like_api_viewset', 'container_type': 'db_manager', 'ip': '10.0.0.12'}
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7eff1b6cb610>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7eff1b6cb610>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7eff1b6cb610>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
task  {'service_models': 'UI', 'class_name': 'PostViewset', 'name_space': 'posts_api.post_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1604392743.079784
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1604392743.079784 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1604392743.079784 pythondocker_db_manager
6c94b1fcf6fbafce09fa7e7851e65833c11a426480834b46484540a078c431f0
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1604392743.079784
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604392743.079784', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1604392743.079784
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604392743.079784', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1604392743.079784
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604392743.079784', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1604392743.079784
None
[sudo] password for miworld_monitor: docker start db_manager1604392743.079784
Error response from daemon: Address already in use
Error: failed to start containers: db_manager1604392743.079784
makefile:18: recipe for target 'run' failed
make: *** [run] Error 1
task  {'service_models': 'UI', 'class_name': 'LikeViewSet', 'name_space': 'likes_api.like_api_viewset', 'container_type': 'db_manager'}
Try to assing a container
in socket
{'NETWORK_INTERFACE': {'MONITOR_NET': '10.0.0.12', 'MANAGER_IN_NET': '14.0.0.12', 'MANAGER_OUT_NET': '15.0.0.12'}, 'NGINX': {'IN_NET': '14.0.0.2', 'OUT_NET': '15.0.0.2', 'url_type': 'mn_con'}}
{"NETWORK_INTERFACE":{"MONITOR_NET":"10.0.0.12","MANAGER_IN_NET":"14.0.0.12","MANAGER_OUT_NET":"15.0.0.12"},"NGINX":{"IN_NET":"14.0.0.2","OUT_NET":"15.0.0.2","url_type":"mn_con"}}
0 10.0.0.4 socket json http://10.0.0.12:10/get_task_from_monitor {'service_models': 'UI', 'class_name': 'PostViewset', 'name_space': 'posts_api.post_viewset', 'container_type': 'db_manager', 'ip': '10.0.0.12'}
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f79a5c32370>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f79a5c32370>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f79a5c32370>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
task  {'service_models': 'UI', 'class_name': 'PostViewset', 'name_space': 'posts_api.post_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1604392960.376202
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1604392960.376202 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1604392960.376202 pythondocker_db_manager
2dfb38e7a5c0447107081fe3c73e25ae6a41051885c31fca9a25ce3ccf680c82
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1604392960.376202
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604392960.376202', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1604392960.376202
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604392960.376202', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1604392960.376202
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604392960.376202', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1604392960.376202
None
[sudo] password for miworld_monitor: docker start db_manager1604392960.376202
Error response from daemon: Address already in use
Error: failed to start containers: db_manager1604392960.376202
makefile:18: recipe for target 'run' failed
make: *** [run] Error 1
task  {'service_models': 'UI', 'class_name': 'LikeViewSet', 'name_space': 'likes_api.like_api_viewset', 'container_type': 'db_manager'}
Try to assing a container
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f181ca5ce20>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f181ca5ce20>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f181ca5ce20>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
kjbviadifbdiugfia---------------------------------------------
task  {'service_models': 'UI', 'class_name': 'PostViewset', 'name_space': 'posts_api.post_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1604394348.93372
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1604394348.93372 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1604394348.93372 pythondocker_db_manager
6d1a93ec1c03f40d1418e3121e37383231077dcdc627784e078bd05a2ce40c29
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1604394348.93372
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604394348.93372', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1604394348.93372
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604394348.93372', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1604394348.93372
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604394348.93372', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1604394348.93372
None
[sudo] password for miworld_monitor: docker start db_manager1604394348.93372
Error response from daemon: Address already in use
Error: failed to start containers: db_manager1604394348.93372
makefile:18: recipe for target 'run' failed
make: *** [run] Error 1
task  {'service_models': 'UI', 'class_name': 'LikeViewSet', 'name_space': 'likes_api.like_api_viewset', 'container_type': 'db_manager'}
Try to assing a container
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f1248574670>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f1248574670>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f1248574670>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
kjbviadifbdiugfia---------------------------------------------
task  {'service_models': 'UI', 'class_name': 'PostViewset', 'name_space': 'posts_api.post_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1604394574.983746
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1604394574.983746 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1604394574.983746 pythondocker_db_manager
2060aa362f1ab1b142d8a30606d15520e564209aef397f9f386fd46cb0d4dc31
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1604394574.983746
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604394574.983746', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1604394574.983746
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604394574.983746', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1604394574.983746
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604394574.983746', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1604394574.983746
None
[sudo] password for miworld_monitor: docker start db_manager1604394574.983746
Error response from daemon: Address already in use
Error: failed to start containers: db_manager1604394574.983746
makefile:18: recipe for target 'run' failed
make: *** [run] Error 1
task  {'service_models': 'UI', 'class_name': 'LikeViewSet', 'name_space': 'likes_api.like_api_viewset', 'container_type': 'db_manager'}
Try to assing a container
in socket
{'NETWORK_INTERFACE': {'MONITOR_NET': '10.0.0.12', 'MANAGER_IN_NET': '14.0.0.12', 'MANAGER_OUT_NET': '15.0.0.12'}, 'NGINX': {'IN_NET': '14.0.0.2', 'OUT_NET': '15.0.0.2', 'url_type': 'mn_con'}}
{"NETWORK_INTERFACE":{"MONITOR_NET":"10.0.0.12","MANAGER_IN_NET":"14.0.0.12","MANAGER_OUT_NET":"15.0.0.12"},"NGINX":{"IN_NET":"14.0.0.2","OUT_NET":"15.0.0.2","url_type":"mn_con"}}
0 10.0.0.4 socket json http://10.0.0.12:10/get_task_from_monitor {'service_models': 'UI', 'class_name': 'PostViewset', 'name_space': 'posts_api.post_viewset', 'container_type': 'db_manager', 'ip': '10.0.0.12'}
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7feeeb792550>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7feeeb792550>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7feeeb792550>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
kjbviadifbdiugfia---------------------------------------------
task  {'service_models': 'UI', 'class_name': 'PostViewset', 'name_space': 'posts_api.post_viewset', 'container_type': 'db_manager'}
Try to assing a container
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f12fbfb6340>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f12fbfb6340>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f12fbfb6340>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
kjbviadifbdiugfia---------------------------------------------
task  {'service_models': 'UI', 'class_name': 'SaveViewset', 'name_space': 'saves_api.save_api_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1604417902.905677
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1604417902.905677 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1604417902.905677 pythondocker_db_manager
089a0559afa85283bd8cc4bc1445c4d4cad210d55293d499e60fde2237ee68b9
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1604417902.905677
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604417902.905677', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1604417902.905677
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604417902.905677', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1604417902.905677
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604417902.905677', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1604417902.905677
None
[sudo] password for miworld_monitor: docker start db_manager1604417902.905677
db_manager1604417902.905677
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f3d05ba15b0>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f3d05ba15b0>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f3d05ba15b0>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
kjbviadifbdiugfia---------------------------------------------
task  {'service_models': 'UI', 'class_name': 'SaveViewset', 'name_space': 'saves_api.save_api_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1604418086.489462
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1604418086.489462 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1604418086.489462 pythondocker_db_manager
213d98ed8ab54b8c25b0fc139f0ccacd15db4c210733decfd1be730035bda876
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1604418086.489462
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604418086.489462', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1604418086.489462
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604418086.489462', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1604418086.489462
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604418086.489462', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1604418086.489462
None
[sudo] password for miworld_monitor: docker start db_manager1604418086.489462
db_manager1604418086.489462
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f0f99a4f3a0>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f0f99a4f3a0>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f0f99a4f3a0>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
kjbviadifbdiugfia---------------------------------------------
task  {'service_models': 'UI', 'class_name': 'SaveViewset', 'name_space': 'saves_api.save_api_viewset', 'container_type': 'db_manager'}
Try to assing a container
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f7e8cbf6970>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f7e8cbf6970>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f7e8cbf6970>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
kjbviadifbdiugfia---------------------------------------------
task  {'service_models': 'UI', 'class_name': 'SaveViewset', 'name_space': 'saves_api.save_api_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1604418300.20111
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1604418300.20111 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1604418300.20111 pythondocker_db_manager
f2d75f5ca4a5418c8029e8f4de875bd1c3529c11452d51c0f29d4f922e39d4f8
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1604418300.20111
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604418300.20111', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1604418300.20111
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604418300.20111', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1604418300.20111
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604418300.20111', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1604418300.20111
None
[sudo] password for miworld_monitor: docker start db_manager1604418300.20111
db_manager1604418300.20111
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f53400dce50>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f53400dce50>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f53400dce50>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
kjbviadifbdiugfia---------------------------------------------
task  {'service_models': 'UI', 'class_name': 'SaveViewset', 'name_space': 'saves_api.save_api_viewset', 'container_type': 'db_manager'}
Try to assing a container
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f5498ce7370>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f5498ce7370>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f5498ce7370>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
kjbviadifbdiugfia---------------------------------------------
task  {'service_models': 'UI', 'class_name': 'SaveViewset', 'name_space': 'saves_api.save_api_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1604418563.296073
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1604418563.296073 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1604418563.296073 pythondocker_db_manager
de33313fd4779958b8a3b31333f81e8bae10da0983cfef9d68003a72cefc1b20
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1604418563.296073
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604418563.296073', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1604418563.296073
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604418563.296073', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1604418563.296073
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604418563.296073', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1604418563.296073
None
[sudo] password for miworld_monitor: docker start db_manager1604418563.296073
db_manager1604418563.296073
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f769e529f10>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f769e529f10>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f769e529f10>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
kjbviadifbdiugfia---------------------------------------------
task  {'service_models': 'UI', 'class_name': 'SaveViewset', 'name_space': 'saves_api.save_api_viewset', 'container_type': 'db_manager'}
Try to assing a container
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f12053e4a60>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f12053e4a60>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f12053e4a60>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
kjbviadifbdiugfia---------------------------------------------
task  {'service_models': 'UI', 'class_name': 'SaveViewset', 'name_space': 'saves_api.save_api_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1604419477.215513
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1604419477.215513 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1604419477.215513 pythondocker_db_manager
082a74749feb9b43a9ce17897b7fbf97c4f005899eb08b9ac2e9ec7a463f2d3f
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1604419477.215513
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604419477.215513', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1604419477.215513
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604419477.215513', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1604419477.215513
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604419477.215513', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1604419477.215513
None
[sudo] password for miworld_monitor: docker start db_manager1604419477.215513
db_manager1604419477.215513
in socket
{'NETWORK_INTERFACE': {'MONITOR_NET': '10.0.0.12', 'MANAGER_IN_NET': '14.0.0.12', 'MANAGER_OUT_NET': '15.0.0.12'}, 'NGINX': {'IN_NET': '14.0.0.2', 'OUT_NET': '15.0.0.2', 'url_type': 'mn_con'}}
{"NETWORK_INTERFACE":{"MONITOR_NET":"10.0.0.12","MANAGER_IN_NET":"14.0.0.12","MANAGER_OUT_NET":"15.0.0.12"},"NGINX":{"IN_NET":"14.0.0.2","OUT_NET":"15.0.0.2","url_type":"mn_con"}}
0 10.0.0.4 socket json http://10.0.0.12:10/get_task_from_monitor {'service_models': 'UI', 'class_name': 'SaveViewset', 'name_space': 'saves_api.save_api_viewset', 'container_type': 'db_manager', 'ip': '10.0.0.12'}
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f71a42bc730>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f71a42bc730>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f71a42bc730>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
kjbviadifbdiugfia---------------------------------------------
task  {'service_models': 'UI', 'class_name': 'SaveViewset', 'name_space': 'saves_api.save_api_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1604419952.183829
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1604419952.183829 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1604419952.183829 pythondocker_db_manager
7d86caf940ef4966723fcdccbce5abcbea6a9a52975ec49b6850ad8d4b8c5b09
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1604419952.183829
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604419952.183829', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1604419952.183829
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604419952.183829', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1604419952.183829
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604419952.183829', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1604419952.183829
None
[sudo] password for miworld_monitor: docker start db_manager1604419952.183829
Error response from daemon: Address already in use
Error: failed to start containers: db_manager1604419952.183829
makefile:18: recipe for target 'run' failed
make: *** [run] Error 1
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7fc300d72100>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7fc300d72100>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7fc300d72100>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
kjbviadifbdiugfia---------------------------------------------
task  {'service_models': 'UI', 'class_name': 'ShareViewSet', 'name_space': 'shares_api.share_api_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1604420194.604463
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1604420194.604463 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1604420194.604463 pythondocker_db_manager
dacafd94e332688c526e8df2892860a8405dbe73a24c5f00253f259fb8532b7b
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1604420194.604463
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604420194.604463', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1604420194.604463
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604420194.604463', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1604420194.604463
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604420194.604463', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1604420194.604463
None
[sudo] password for miworld_monitor: docker start db_manager1604420194.604463
Error response from daemon: Address already in use
Error: failed to start containers: db_manager1604420194.604463
makefile:18: recipe for target 'run' failed
make: *** [run] Error 1
in socket
{'NETWORK_INTERFACE': {'MONITOR_NET': '10.0.0.12', 'MANAGER_IN_NET': '14.0.0.12', 'MANAGER_OUT_NET': '15.0.0.12'}, 'NGINX': {'IN_NET': '14.0.0.2', 'OUT_NET': '15.0.0.2', 'url_type': 'mn_con'}}
{"NETWORK_INTERFACE":{"MONITOR_NET":"10.0.0.12","MANAGER_IN_NET":"14.0.0.12","MANAGER_OUT_NET":"15.0.0.12"},"NGINX":{"IN_NET":"14.0.0.2","OUT_NET":"15.0.0.2","url_type":"mn_con"}}
0 10.0.0.4 socket json http://10.0.0.12:10/get_task_from_monitor {'service_models': 'UI', 'class_name': 'ShareViewSet', 'name_space': 'shares_api.share_api_viewset', 'container_type': 'db_manager', 'ip': '10.0.0.12'}
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7fba65b23e20>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7fba65b23e20>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7fba65b23e20>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
kjbviadifbdiugfia---------------------------------------------
task  {'service_models': 'UI', 'class_name': 'StoryViewset', 'name_space': 'stories_api.stories_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1604420778.680196
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1604420778.680196 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1604420778.680196 pythondocker_db_manager
534a848b09a97f63fcbae2b7d151b46109bbfd0acfa54cbac2357d047d54fdbb
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1604420778.680196
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604420778.680196', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1604420778.680196
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604420778.680196', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1604420778.680196
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604420778.680196', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1604420778.680196
None
[sudo] password for miworld_monitor: docker start db_manager1604420778.680196
Error response from daemon: Address already in use
Error: failed to start containers: db_manager1604420778.680196
makefile:18: recipe for target 'run' failed
make: *** [run] Error 1
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7fa7adb09e20>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7fa7adb09e20>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7fa7adb09e20>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
kjbviadifbdiugfia---------------------------------------------
task  {'service_models': 'UI', 'class_name': 'StoryViewset', 'name_space': 'stories_api.stories_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1604421270.986694
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1604421270.986694 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1604421270.986694 pythondocker_db_manager
7eaddf5e1941edda30decbd7a53911306a197bccfaf5bf0bc24e4a6354915055
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1604421270.986694
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604421270.986694', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1604421270.986694
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604421270.986694', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1604421270.986694
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604421270.986694', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1604421270.986694
None
[sudo] password for miworld_monitor: docker start db_manager1604421270.986694
db_manager1604421270.986694
in socket
{'NETWORK_INTERFACE': {'MONITOR_NET': '10.0.0.12', 'MANAGER_IN_NET': '14.0.0.12', 'MANAGER_OUT_NET': '15.0.0.12'}, 'NGINX': {'IN_NET': '14.0.0.2', 'OUT_NET': '15.0.0.2', 'url_type': 'mn_con'}}
{"NETWORK_INTERFACE":{"MONITOR_NET":"10.0.0.12","MANAGER_IN_NET":"14.0.0.12","MANAGER_OUT_NET":"15.0.0.12"},"NGINX":{"IN_NET":"14.0.0.2","OUT_NET":"15.0.0.2","url_type":"mn_con"}}
0 10.0.0.4 socket json http://10.0.0.12:10/get_task_from_monitor {'service_models': 'UI', 'class_name': 'StoryViewset', 'name_space': 'stories_api.stories_viewset', 'container_type': 'db_manager', 'ip': '10.0.0.12'}
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f7c19f840d0>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f7c19f840d0>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f7c19f840d0>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
kjbviadifbdiugfia---------------------------------------------
task  {'service_models': 'UI', 'class_name': 'StoryViewset', 'name_space': 'stories_api.stories_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1604422142.398539
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1604422142.398539 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1604422142.398539 pythondocker_db_manager
5e70de4955c3b434092bbd600ab2c9388b45376c88d37bd355fe8fc4813b26d1
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1604422142.398539
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604422142.398539', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1604422142.398539
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604422142.398539', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1604422142.398539
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604422142.398539', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1604422142.398539
None
[sudo] password for miworld_monitor: docker start db_manager1604422142.398539
Error response from daemon: Address already in use
Error: failed to start containers: db_manager1604422142.398539
makefile:18: recipe for target 'run' failed
make: *** [run] Error 1
task  {'service_models': 'UI', 'class_name': 'ViewViewset', 'name_space': 'views_api.views_viewset', 'container_type': 'db_manager'}
Try to assing a container
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f876849f340>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f876849f340>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f876849f340>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
kjbviadifbdiugfia---------------------------------------------
task  {'service_models': 'UI', 'class_name': 'StoryViewset', 'name_space': 'stories_api.stories_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1604472256.956774
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1604472256.956774 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1604472256.956774 pythondocker_db_manager
bf03583763e1e60882ec08409823d50ed468d6503d7981c067fae7e0b2783f4b
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1604472256.956774
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604472256.956774', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1604472256.956774
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604472256.956774', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1604472256.956774
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604472256.956774', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1604472256.956774
None
[sudo] password for miworld_monitor: docker start db_manager1604472256.956774
db_manager1604472256.956774
in socket
{'NETWORK_INTERFACE': {'MONITOR_NET': '10.0.0.12', 'MANAGER_IN_NET': '14.0.0.12', 'MANAGER_OUT_NET': '15.0.0.12'}, 'NGINX': {'IN_NET': '14.0.0.2', 'OUT_NET': '15.0.0.2', 'url_type': 'mn_con'}}
{"NETWORK_INTERFACE":{"MONITOR_NET":"10.0.0.12","MANAGER_IN_NET":"14.0.0.12","MANAGER_OUT_NET":"15.0.0.12"},"NGINX":{"IN_NET":"14.0.0.2","OUT_NET":"15.0.0.2","url_type":"mn_con"}}
task  {'service_models': 'UI', 'class_name': 'ViewViewset', 'name_space': 'views_api.views_viewset', 'container_type': 'db_manager'}
Try to assing a container
0 10.0.0.4 socket json http://10.0.0.12:10/get_task_from_monitor {'service_models': 'UI', 'class_name': 'StoryViewset', 'name_space': 'stories_api.stories_viewset', 'container_type': 'db_manager', 'ip': '10.0.0.12'}
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7efc514bc640>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7efc514bc640>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7efc514bc640>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
kjbviadifbdiugfia---------------------------------------------
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1604473205.766402
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1604473205.766402 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1604473205.766402 pythondocker_db_manager
e1201309721b025e23dec2b1554d4781ebf447fbb974dd7e286e646a7e8c7c78
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1604473205.766402
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604473205.766402', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1604473205.766402
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604473205.766402', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1604473205.766402
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604473205.766402', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1604473205.766402
None
[sudo] password for miworld_monitor: docker start db_manager1604473205.766402
Error response from daemon: Address already in use
Error: failed to start containers: db_manager1604473205.766402
makefile:18: recipe for target 'run' failed
make: *** [run] Error 1
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f987bbfd400>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f987bbfd400>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f987bbfd400>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
kjbviadifbdiugfia---------------------------------------------
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1604473846.37407
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1604473846.37407 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1604473846.37407 pythondocker_db_manager
c9949576499bc8f183831b7af5714813664aac9f776fb0cd62f676774ac717e4
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1604473846.37407
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604473846.37407', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1604473846.37407
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604473846.37407', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1604473846.37407
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604473846.37407', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1604473846.37407
None
[sudo] password for miworld_monitor: docker start db_manager1604473846.37407
db_manager1604473846.37407
in socket
{'NETWORK_INTERFACE': {'MONITOR_NET': '10.0.0.12', 'MANAGER_IN_NET': '14.0.0.12', 'MANAGER_OUT_NET': '15.0.0.12'}, 'NGINX': {'IN_NET': '14.0.0.2', 'OUT_NET': '15.0.0.2', 'url_type': 'mn_con'}}
{"NETWORK_INTERFACE":{"MONITOR_NET":"10.0.0.12","MANAGER_IN_NET":"14.0.0.12","MANAGER_OUT_NET":"15.0.0.12"},"NGINX":{"IN_NET":"14.0.0.2","OUT_NET":"15.0.0.2","url_type":"mn_con"}}
0 10.0.0.4 socket json http://10.0.0.12:10/get_task_from_monitor {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager', 'ip': '10.0.0.12'}
{'configes': [{'url': '/PermissionPermissionBitMapper/viewset/Cassandracreate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandracreate'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandraupdate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandraupdate'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandradelete', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandradelete'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandralist', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandralist'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandraretrieve', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandraretrieve'}], 'url_type': 'mn_con'}
scp -o StrictHostKeyChecking=no -i my_secreat temp_file.txt miworld_monitor@172.17.0.1:~/nginx_config_01.txt
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S cp nginx_config_01.txt /home/miworld_monitor/mn_con/nginx.conf"
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S python3 nginx_changer.py manager"
[sudo] password for miworld_monitor: [sudo] password for miworld_monitor: docker-compose exec manager nginx -s reload
[31mERROR[0m: Container d7b6ad8ed975345afccb5949431fe57d04e8c77bf5c7ac917962175cfabfa953 is restarting, wait until the container is running
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f0b23332970>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f0b23332970>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f0b23332970>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
kjbviadifbdiugfia---------------------------------------------
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1604474265.289266
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1604474265.289266 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1604474265.289266 pythondocker_db_manager
93adb1a5c1adafd99a5323cbeff363cf67bccf7338d250252243ab901208fcec
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1604474265.289266
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604474265.289266', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1604474265.289266
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604474265.289266', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1604474265.289266
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604474265.289266', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1604474265.289266
None
[sudo] password for miworld_monitor: docker start db_manager1604474265.289266
Error response from daemon: Address already in use
Error: failed to start containers: db_manager1604474265.289266
makefile:18: recipe for target 'run' failed
make: *** [run] Error 1
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperPostgresqlViewset', 'name_space': 'PermissionPermissionBitMapper.Postgresql_viewset', 'container_type': 'db_manager'}
Try to assing a container
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f7f208e8610>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f7f208e8610>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f7f208e8610>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
kjbviadifbdiugfia---------------------------------------------
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1604474491.010725
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1604474491.010725 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1604474491.010725 pythondocker_db_manager
2a9ad9bd2183f86bbd5e5fa83c98ce49e1264a80760c855c51ae43ba604c5c7c
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1604474491.010725
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604474491.010725', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1604474491.010725
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604474491.010725', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1604474491.010725
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604474491.010725', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1604474491.010725
None
[sudo] password for miworld_monitor: docker start db_manager1604474491.010725
db_manager1604474491.010725
in socket
{'NETWORK_INTERFACE': {'MONITOR_NET': '10.0.0.12', 'MANAGER_IN_NET': '14.0.0.12', 'MANAGER_OUT_NET': '15.0.0.12'}, 'NGINX': {'IN_NET': '14.0.0.2', 'OUT_NET': '15.0.0.2', 'url_type': 'mn_con'}}
{"NETWORK_INTERFACE":{"MONITOR_NET":"10.0.0.12","MANAGER_IN_NET":"14.0.0.12","MANAGER_OUT_NET":"15.0.0.12"},"NGINX":{"IN_NET":"14.0.0.2","OUT_NET":"15.0.0.2","url_type":"mn_con"}}
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperPostgresqlViewset', 'name_space': 'PermissionPermissionBitMapper.Postgresql_viewset', 'container_type': 'db_manager'}
Try to assing a container
0 10.0.0.4 socket json http://10.0.0.12:10/get_task_from_monitor {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager', 'ip': '10.0.0.12'}
{'configes': [{'url': '/PermissionPermissionBitMapper/viewset/Cassandracreate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandracreate'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandraupdate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandraupdate'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandradelete', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandradelete'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandralist', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandralist'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandraretrieve', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandraretrieve'}], 'url_type': 'mn_con'}
scp -o StrictHostKeyChecking=no -i my_secreat temp_file.txt miworld_monitor@172.17.0.1:~/nginx_config_01.txt
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S cp nginx_config_01.txt /home/miworld_monitor/mn_con/nginx.conf"
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S python3 nginx_changer.py manager"
[sudo] password for miworld_monitor: [sudo] password for miworld_monitor: docker-compose exec manager nginx -s reload
[31mERROR[0m: Container d7b6ad8ed975345afccb5949431fe57d04e8c77bf5c7ac917962175cfabfa953 is restarting, wait until the container is running
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7fc60891b5b0>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7fc60891b5b0>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7fc60891b5b0>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
kjbviadifbdiugfia---------------------------------------------
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperRedisViewset', 'name_space': 'PermissionPermissionBitMapper.Redis_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1604474720.154675
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1604474720.154675 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1604474720.154675 pythondocker_db_manager
43379035fe1b184efcebc1f23704609d285b1daf83af5563ea23d4ecde53297e
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1604474720.154675
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604474720.154675', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1604474720.154675
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604474720.154675', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1604474720.154675
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604474720.154675', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1604474720.154675
None
[sudo] password for miworld_monitor: docker start db_manager1604474720.154675
Error response from daemon: Address already in use
Error: failed to start containers: db_manager1604474720.154675
makefile:18: recipe for target 'run' failed
make: *** [run] Error 1
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f90f1f085e0>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f90f1f085e0>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f90f1f085e0>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
kjbviadifbdiugfia---------------------------------------------
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperRedisViewset', 'name_space': 'PermissionPermissionBitMapper.Redis_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1604474882.293823
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1604474882.293823 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1604474882.293823 pythondocker_db_manager
b155fea7d3f63911152ed44b56e9720b40cee28e1651a5dbd5b63c3419bc481a
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1604474882.293823
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604474882.293823', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1604474882.293823
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604474882.293823', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1604474882.293823
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604474882.293823', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1604474882.293823
None
[sudo] password for miworld_monitor: docker start db_manager1604474882.293823
db_manager1604474882.293823
in socket
{'NETWORK_INTERFACE': {'MONITOR_NET': '10.0.0.12', 'MANAGER_IN_NET': '14.0.0.12', 'MANAGER_OUT_NET': '15.0.0.12'}, 'NGINX': {'IN_NET': '14.0.0.2', 'OUT_NET': '15.0.0.2', 'url_type': 'mn_con'}}
{"NETWORK_INTERFACE":{"MONITOR_NET":"10.0.0.12","MANAGER_IN_NET":"14.0.0.12","MANAGER_OUT_NET":"15.0.0.12"},"NGINX":{"IN_NET":"14.0.0.2","OUT_NET":"15.0.0.2","url_type":"mn_con"}}
0 10.0.0.4 socket json http://10.0.0.12:10/get_task_from_monitor {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperRedisViewset', 'name_space': 'PermissionPermissionBitMapper.Redis_viewset', 'container_type': 'db_manager', 'ip': '10.0.0.12'}
{'configes': [{'url': '/PermissionPermissionBitMapper/viewset/Rediscreate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Rediscreate'}, {'url': '/PermissionPermissionBitMapper/viewset/Redisupdate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Redisupdate'}, {'url': '/PermissionPermissionBitMapper/viewset/Redisdelete', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Redisdelete'}, {'url': '/PermissionPermissionBitMapper/viewset/Redislist', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Redislist'}, {'url': '/PermissionPermissionBitMapper/viewset/Redisretrieve', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Redisretrieve'}], 'url_type': 'mn_con'}
scp -o StrictHostKeyChecking=no -i my_secreat temp_file.txt miworld_monitor@172.17.0.1:~/nginx_config_01.txt
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S cp nginx_config_01.txt /home/miworld_monitor/mn_con/nginx.conf"
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S python3 nginx_changer.py manager"
[sudo] password for miworld_monitor: [sudo] password for miworld_monitor: docker-compose exec manager nginx -s reload
[31mERROR[0m: Container d7b6ad8ed975345afccb5949431fe57d04e8c77bf5c7ac917962175cfabfa953 is restarting, wait until the container is running
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f166086a640>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f166086a640>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f166086a640>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
kjbviadifbdiugfia---------------------------------------------
task  {'service_models': 'UI', 'class_name': 'ChattingCassandraViewset', 'name_space': 'Chatting.Cassandra_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1604475573.760412
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1604475573.760412 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1604475573.760412 pythondocker_db_manager
c27a0773f71a7e415bea8725ae82d9da9096c086d5f03da7e6d4fb3629135b92
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1604475573.760412
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604475573.760412', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1604475573.760412
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604475573.760412', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1604475573.760412
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604475573.760412', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1604475573.760412
None
[sudo] password for miworld_monitor: docker start db_manager1604475573.760412
db_manager1604475573.760412
in socket
{'NETWORK_INTERFACE': {'MONITOR_NET': '10.0.0.12', 'MANAGER_IN_NET': '14.0.0.12', 'MANAGER_OUT_NET': '15.0.0.12'}, 'NGINX': {'IN_NET': '14.0.0.2', 'OUT_NET': '15.0.0.2', 'url_type': 'mn_con'}}
{"NETWORK_INTERFACE":{"MONITOR_NET":"10.0.0.12","MANAGER_IN_NET":"14.0.0.12","MANAGER_OUT_NET":"15.0.0.12"},"NGINX":{"IN_NET":"14.0.0.2","OUT_NET":"15.0.0.2","url_type":"mn_con"}}
0 10.0.0.4 socket json http://10.0.0.12:10/get_task_from_monitor {'service_models': 'UI', 'class_name': 'ChattingCassandraViewset', 'name_space': 'Chatting.Cassandra_viewset', 'container_type': 'db_manager', 'ip': '10.0.0.12'}
{'configes': [{'url': '/Chatting/viewset/Cassandracreate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/Chatting/viewset/Cassandracreate'}, {'url': '/Chatting/viewset/Cassandraupdate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/Chatting/viewset/Cassandraupdate'}, {'url': '/Chatting/viewset/Cassandradelete', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/Chatting/viewset/Cassandradelete'}, {'url': '/Chatting/viewset/Cassandralist', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/Chatting/viewset/Cassandralist'}, {'url': '/Chatting/viewset/Cassandraretrieve', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/Chatting/viewset/Cassandraretrieve'}], 'url_type': 'mn_con'}
scp -o StrictHostKeyChecking=no -i my_secreat temp_file.txt miworld_monitor@172.17.0.1:~/nginx_config_01.txt
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S cp nginx_config_01.txt /home/miworld_monitor/mn_con/nginx.conf"
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S python3 nginx_changer.py manager"
[sudo] password for miworld_monitor: [sudo] password for miworld_monitor: docker-compose exec manager nginx -s reload
[31mERROR[0m: Container d7b6ad8ed975345afccb5949431fe57d04e8c77bf5c7ac917962175cfabfa953 is restarting, wait until the container is running
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7ff3af0860d0>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7ff3af0860d0>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7ff3af0860d0>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
kjbviadifbdiugfia---------------------------------------------
task  {'service_models': 'UI', 'class_name': 'ChattingCassandraViewset', 'name_space': 'Chatting.Cassandra_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1604476400.002979
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1604476400.002979 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1604476400.002979 pythondocker_db_manager
21c4fff897b4f20254c1892392d8db23dda508d8b4d4a2b61922501407bead05
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1604476400.002979
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604476400.002979', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1604476400.002979
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604476400.002979', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1604476400.002979
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604476400.002979', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1604476400.002979
None
[sudo] password for miworld_monitor: docker start db_manager1604476400.002979
Error response from daemon: Address already in use
Error: failed to start containers: db_manager1604476400.002979
makefile:18: recipe for target 'run' failed
make: *** [run] Error 1
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f9b7c7630d0>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f9b7c7630d0>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f9b7c7630d0>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
kjbviadifbdiugfia---------------------------------------------
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperRedisViewset', 'name_space': 'PermissionPermissionBitMapper.Redis_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1604477803.175082
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1604477803.175082 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1604477803.175082 pythondocker_db_manager
0a178e901af648ba94b3c8d3721ed620ecfde7644b03c42a5172f3ae9dee880c
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1604477803.175082
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604477803.175082', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1604477803.175082
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604477803.175082', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1604477803.175082
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604477803.175082', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1604477803.175082
None
[sudo] password for miworld_monitor: docker start db_manager1604477803.175082
Error response from daemon: Address already in use
Error: failed to start containers: db_manager1604477803.175082
makefile:18: recipe for target 'run' failed
make: *** [run] Error 1
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f370a2410d0>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f370a2410d0>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f370a2410d0>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
kjbviadifbdiugfia---------------------------------------------
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperRedisViewset', 'name_space': 'PermissionPermissionBitMapper.Redis_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1604480044.953114
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1604480044.953114 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1604480044.953114 pythondocker_db_manager
b33ea6f5372fbea2f32c1acde0d36f8d1ada510890d5149edbf363cc72ee5c81
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1604480044.953114
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604480044.953114', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1604480044.953114
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604480044.953114', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1604480044.953114
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604480044.953114', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1604480044.953114
None
[sudo] password for miworld_monitor: docker start db_manager1604480044.953114
Error response from daemon: Address already in use
Error: failed to start containers: db_manager1604480044.953114
makefile:18: recipe for target 'run' failed
make: *** [run] Error 1
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f987a5a00d0>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f987a5a00d0>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f987a5a00d0>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
kjbviadifbdiugfia---------------------------------------------
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperRedisViewset', 'name_space': 'PermissionPermissionBitMapper.Redis_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1604483990.913989
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1604483990.913989 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1604483990.913989 pythondocker_db_manager
7980a1914a8c08197aa3a5652ec863e445c96646716e09a73e28724b29877b6b
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1604483990.913989
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604483990.913989', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1604483990.913989
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604483990.913989', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1604483990.913989
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604483990.913989', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1604483990.913989
None
[sudo] password for miworld_monitor: docker start db_manager1604483990.913989
db_manager1604483990.913989
in socket
{'NETWORK_INTERFACE': {'MONITOR_NET': '10.0.0.12', 'MANAGER_IN_NET': '14.0.0.12', 'MANAGER_OUT_NET': '15.0.0.12'}, 'NGINX': {'IN_NET': '14.0.0.2', 'OUT_NET': '15.0.0.2', 'url_type': 'mn_con'}}
{"NETWORK_INTERFACE":{"MONITOR_NET":"10.0.0.12","MANAGER_IN_NET":"14.0.0.12","MANAGER_OUT_NET":"15.0.0.12"},"NGINX":{"IN_NET":"14.0.0.2","OUT_NET":"15.0.0.2","url_type":"mn_con"}}
0 10.0.0.4 socket json http://10.0.0.12:10/get_task_from_monitor {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperRedisViewset', 'name_space': 'PermissionPermissionBitMapper.Redis_viewset', 'container_type': 'db_manager', 'ip': '10.0.0.12'}
{'configes': [{'url': '/PermissionPermissionBitMapper/viewset/Rediscreate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Rediscreate'}, {'url': '/PermissionPermissionBitMapper/viewset/Redisupdate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Redisupdate'}, {'url': '/PermissionPermissionBitMapper/viewset/Redisdelete', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Redisdelete'}, {'url': '/PermissionPermissionBitMapper/viewset/Redislist', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Redislist'}, {'url': '/PermissionPermissionBitMapper/viewset/Redisretrieve', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Redisretrieve'}], 'url_type': 'mn_con'}
scp -o StrictHostKeyChecking=no -i my_secreat temp_file.txt miworld_monitor@172.17.0.1:~/nginx_config_01.txt
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S cp nginx_config_01.txt /home/miworld_monitor/mn_con/nginx.conf"
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S python3 nginx_changer.py manager"
[sudo] password for miworld_monitor: [sudo] password for miworld_monitor: docker-compose exec manager nginx -s reload
[31mERROR[0m: Container d7b6ad8ed975345afccb5949431fe57d04e8c77bf5c7ac917962175cfabfa953 is restarting, wait until the container is running
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f5b0e56c130>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f5b0e56c130>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f5b0e56c130>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
kjbviadifbdiugfia---------------------------------------------
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1604484230.136472
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1604484230.136472 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1604484230.136472 pythondocker_db_manager
a15295e9fe9fd5457b9a2768b8804c34b3aaa84748efaedaf2a1a339541c6ef1
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1604484230.136472
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604484230.136472', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1604484230.136472
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604484230.136472', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1604484230.136472
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604484230.136472', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1604484230.136472
None
[sudo] password for miworld_monitor: docker start db_manager1604484230.136472
db_manager1604484230.136472
in socket
{'NETWORK_INTERFACE': {'MONITOR_NET': '10.0.0.12', 'MANAGER_IN_NET': '14.0.0.12', 'MANAGER_OUT_NET': '15.0.0.12'}, 'NGINX': {'IN_NET': '14.0.0.2', 'OUT_NET': '15.0.0.2', 'url_type': 'mn_con'}}
{"NETWORK_INTERFACE":{"MONITOR_NET":"10.0.0.12","MANAGER_IN_NET":"14.0.0.12","MANAGER_OUT_NET":"15.0.0.12"},"NGINX":{"IN_NET":"14.0.0.2","OUT_NET":"15.0.0.2","url_type":"mn_con"}}
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperPostgresqlViewset', 'name_space': 'PermissionPermissionBitMapper.Postgresql_viewset', 'container_type': 'db_manager'}
Try to assing a container
0 10.0.0.4 socket json http://10.0.0.12:10/get_task_from_monitor {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager', 'ip': '10.0.0.12'}
{'configes': [{'url': '/PermissionPermissionBitMapper/viewset/Cassandracreate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandracreate'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandraupdate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandraupdate'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandradelete', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandradelete'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandralist', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandralist'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandraretrieve', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandraretrieve'}], 'url_type': 'mn_con'}
scp -o StrictHostKeyChecking=no -i my_secreat temp_file.txt miworld_monitor@172.17.0.1:~/nginx_config_01.txt
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S cp nginx_config_01.txt /home/miworld_monitor/mn_con/nginx.conf"
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S python3 nginx_changer.py manager"
[sudo] password for miworld_monitor: [sudo] password for miworld_monitor: docker-compose exec manager nginx -s reload
[31mERROR[0m: Container d7b6ad8ed975345afccb5949431fe57d04e8c77bf5c7ac917962175cfabfa953 is restarting, wait until the container is running
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7ff33a844f40>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7ff33a844f40>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7ff33a844f40>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
kjbviadifbdiugfia---------------------------------------------
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager'}
Try to assing a container
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f71a8537970>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f71a8537970>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f71a8537970>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
kjbviadifbdiugfia---------------------------------------------
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1604489137.498967
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1604489137.498967 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1604489137.498967 pythondocker_db_manager
f537cb3f7d56963bee0214f0f3b5fb233bae25adf6b29f1ee81b5ce27f9fd599
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1604489137.498967
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604489137.498967', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1604489137.498967
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604489137.498967', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1604489137.498967
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604489137.498967', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1604489137.498967
None
[sudo] password for miworld_monitor: docker start db_manager1604489137.498967
Error response from daemon: Address already in use
Error: failed to start containers: db_manager1604489137.498967
makefile:18: recipe for target 'run' failed
make: *** [run] Error 1
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperPostgresqlViewset', 'name_space': 'PermissionPermissionBitMapper.Postgresql_viewset', 'container_type': 'db_manager'}
Try to assing a container
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f716971e970>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f716971e970>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f716971e970>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
kjbviadifbdiugfia---------------------------------------------
task  {'service_models': 'UI', 'class_name': 'ChattingPostgresqlViewset', 'name_space': 'Chatting.Postgresql_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1604489984.593412
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1604489984.593412 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1604489984.593412 pythondocker_db_manager
f7670770c59bd8d2b50c3b3bf16d063828f26f59f3dc197fa1896e2859261dc8
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1604489984.593412
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604489984.593412', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1604489984.593412
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604489984.593412', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1604489984.593412
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604489984.593412', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1604489984.593412
None
[sudo] password for miworld_monitor: docker start db_manager1604489984.593412
Error response from daemon: Address already in use
Error: failed to start containers: db_manager1604489984.593412
makefile:18: recipe for target 'run' failed
make: *** [run] Error 1
task  {'service_models': 'UI', 'class_name': 'ChattingRedisViewset', 'name_space': 'Chatting.Redis_viewset', 'container_type': 'db_manager'}
Try to assing a container
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f3ade99be80>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f3ade99be80>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f3ade99be80>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
kjbviadifbdiugfia---------------------------------------------
task  {'service_models': 'UI', 'class_name': 'ChattingPostgresqlViewset', 'name_space': 'Chatting.Postgresql_viewset', 'container_type': 'db_manager'}
Try to assing a container
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7fdaf9269f70>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7fdaf9269f70>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7fdaf9269f70>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
kjbviadifbdiugfia---------------------------------------------
task  {'service_models': 'UI', 'class_name': 'ChattingPostgresqlViewset', 'name_space': 'Chatting.Postgresql_viewset', 'container_type': 'db_manager'}
Try to assing a container
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f89cba9d340>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f89cba9d340>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f89cba9d340>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
kjbviadifbdiugfia---------------------------------------------
task  {'service_models': 'UI', 'class_name': 'ChattingPostgresqlViewset', 'name_space': 'Chatting.Postgresql_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1604514742.115105
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1604514742.115105 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1604514742.115105 pythondocker_db_manager
abb8b1e8fc4accc0e777345219e13927cc7761d2b70321d195d2a9551bafca65
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1604514742.115105
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604514742.115105', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1604514742.115105
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604514742.115105', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1604514742.115105
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604514742.115105', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1604514742.115105
None
[sudo] password for miworld_monitor: docker start db_manager1604514742.115105
db_manager1604514742.115105
in socket
{'NETWORK_INTERFACE': {'MONITOR_NET': '10.0.0.12', 'MANAGER_IN_NET': '14.0.0.12', 'MANAGER_OUT_NET': '15.0.0.12'}, 'NGINX': {'IN_NET': '14.0.0.2', 'OUT_NET': '15.0.0.2', 'url_type': 'mn_con'}}
{"NETWORK_INTERFACE":{"MONITOR_NET":"10.0.0.12","MANAGER_IN_NET":"14.0.0.12","MANAGER_OUT_NET":"15.0.0.12"},"NGINX":{"IN_NET":"14.0.0.2","OUT_NET":"15.0.0.2","url_type":"mn_con"}}
task  {'service_models': 'UI', 'class_name': 'ChattingRedisViewset', 'name_space': 'Chatting.Redis_viewset', 'container_type': 'db_manager'}
Try to assing a container
0 10.0.0.4 socket json http://10.0.0.12:10/get_task_from_monitor {'service_models': 'UI', 'class_name': 'ChattingPostgresqlViewset', 'name_space': 'Chatting.Postgresql_viewset', 'container_type': 'db_manager', 'ip': '10.0.0.12'}
{'configes': [{'url': '/Chatting/viewset/Postgresqlcreate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/Chatting/viewset/Postgresqlcreate'}, {'url': '/Chatting/viewset/Postgresqlupdate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/Chatting/viewset/Postgresqlupdate'}, {'url': '/Chatting/viewset/Postgresqldelete', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/Chatting/viewset/Postgresqldelete'}, {'url': '/Chatting/viewset/Postgresqllist', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/Chatting/viewset/Postgresqllist'}, {'url': '/Chatting/viewset/Postgresqlretrieve', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/Chatting/viewset/Postgresqlretrieve'}], 'url_type': 'mn_con'}
scp -o StrictHostKeyChecking=no -i my_secreat temp_file.txt miworld_monitor@172.17.0.1:~/nginx_config_01.txt
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S cp nginx_config_01.txt /home/miworld_monitor/mn_con/nginx.conf"
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S python3 nginx_changer.py manager"
[sudo] password for miworld_monitor: [sudo] password for miworld_monitor: docker-compose exec manager nginx -s reload
[31mERROR[0m: Container d7b6ad8ed975345afccb5949431fe57d04e8c77bf5c7ac917962175cfabfa953 is restarting, wait until the container is running
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f1b5b8cd8b0>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f1b5b8cd8b0>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f1b5b8cd8b0>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
kjbviadifbdiugfia---------------------------------------------
task  {'service_models': 'UI', 'class_name': 'ChattingPostgresqlViewset', 'name_space': 'Chatting.Postgresql_viewset', 'container_type': 'db_manager'}
Try to assing a container
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f1c32fca5b0>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f1c32fca5b0>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f1c32fca5b0>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
kjbviadifbdiugfia---------------------------------------------
task  {'service_models': 'UI', 'class_name': 'ChattingPostgresqlViewset', 'name_space': 'Chatting.Postgresql_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1604515229.222825
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1604515229.222825 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1604515229.222825 pythondocker_db_manager
a73dbc5dee095b1858dab9d206f6f6c004fbdf43f90672cbc9ae9f76206e80a7
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1604515229.222825
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604515229.222825', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1604515229.222825
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604515229.222825', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1604515229.222825
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604515229.222825', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1604515229.222825
None
[sudo] password for miworld_monitor: docker start db_manager1604515229.222825
db_manager1604515229.222825
in socket
{'NETWORK_INTERFACE': {'MONITOR_NET': '10.0.0.12', 'MANAGER_IN_NET': '14.0.0.12', 'MANAGER_OUT_NET': '15.0.0.12'}, 'NGINX': {'IN_NET': '14.0.0.2', 'OUT_NET': '15.0.0.2', 'url_type': 'mn_con'}}
{"NETWORK_INTERFACE":{"MONITOR_NET":"10.0.0.12","MANAGER_IN_NET":"14.0.0.12","MANAGER_OUT_NET":"15.0.0.12"},"NGINX":{"IN_NET":"14.0.0.2","OUT_NET":"15.0.0.2","url_type":"mn_con"}}
task  {'service_models': 'UI', 'class_name': 'ChattingRedisViewset', 'name_space': 'Chatting.Redis_viewset', 'container_type': 'db_manager'}
Try to assing a container
0 10.0.0.4 socket json http://10.0.0.12:10/get_task_from_monitor {'service_models': 'UI', 'class_name': 'ChattingPostgresqlViewset', 'name_space': 'Chatting.Postgresql_viewset', 'container_type': 'db_manager', 'ip': '10.0.0.12'}
{'configes': [{'url': '/Chatting/viewset/Postgresqlcreate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/Chatting/viewset/Postgresqlcreate'}, {'url': '/Chatting/viewset/Postgresqlupdate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/Chatting/viewset/Postgresqlupdate'}, {'url': '/Chatting/viewset/Postgresqldelete', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/Chatting/viewset/Postgresqldelete'}, {'url': '/Chatting/viewset/Postgresqllist', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/Chatting/viewset/Postgresqllist'}, {'url': '/Chatting/viewset/Postgresqlretrieve', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/Chatting/viewset/Postgresqlretrieve'}], 'url_type': 'mn_con'}
scp -o StrictHostKeyChecking=no -i my_secreat temp_file.txt miworld_monitor@172.17.0.1:~/nginx_config_01.txt
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S cp nginx_config_01.txt /home/miworld_monitor/mn_con/nginx.conf"
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S python3 nginx_changer.py manager"
[sudo] password for miworld_monitor: [sudo] password for miworld_monitor: docker-compose exec manager nginx -s reload
[31mERROR[0m: No container found for manager_1
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f11645240d0>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f11645240d0>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f11645240d0>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
kjbviadifbdiugfia---------------------------------------------
task  {'service_models': 'UI', 'class_name': 'ChattingPostgresqlViewset', 'name_space': 'Chatting.Postgresql_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1604515588.399692
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1604515588.399692 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1604515588.399692 pythondocker_db_manager
5494702de82a2c7b9124b2fc0a412c9c00c80a69bd470e3e90565d1dc0703905
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1604515588.399692
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604515588.399692', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1604515588.399692
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604515588.399692', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1604515588.399692
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604515588.399692', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1604515588.399692
None
[sudo] password for miworld_monitor: docker start db_manager1604515588.399692
db_manager1604515588.399692
in socket
{'NETWORK_INTERFACE': {'MONITOR_NET': '10.0.0.12', 'MANAGER_IN_NET': '14.0.0.12', 'MANAGER_OUT_NET': '15.0.0.12'}, 'NGINX': {'IN_NET': '14.0.0.2', 'OUT_NET': '15.0.0.2', 'url_type': 'mn_con'}}
{"NETWORK_INTERFACE":{"MONITOR_NET":"10.0.0.12","MANAGER_IN_NET":"14.0.0.12","MANAGER_OUT_NET":"15.0.0.12"},"NGINX":{"IN_NET":"14.0.0.2","OUT_NET":"15.0.0.2","url_type":"mn_con"}}
task  {'service_models': 'UI', 'class_name': 'ChattingRedisViewset', 'name_space': 'Chatting.Redis_viewset', 'container_type': 'db_manager'}
Try to assing a container
0 10.0.0.4 socket json http://10.0.0.12:10/get_task_from_monitor {'service_models': 'UI', 'class_name': 'ChattingPostgresqlViewset', 'name_space': 'Chatting.Postgresql_viewset', 'container_type': 'db_manager', 'ip': '10.0.0.12'}
{'configes': [{'url': '/Chatting/viewset/Postgresqlcreate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/Chatting/viewset/Postgresqlcreate'}, {'url': '/Chatting/viewset/Postgresqlupdate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/Chatting/viewset/Postgresqlupdate'}, {'url': '/Chatting/viewset/Postgresqldelete', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/Chatting/viewset/Postgresqldelete'}, {'url': '/Chatting/viewset/Postgresqllist', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/Chatting/viewset/Postgresqllist'}, {'url': '/Chatting/viewset/Postgresqlretrieve', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/Chatting/viewset/Postgresqlretrieve'}], 'url_type': 'mn_con'}
scp -o StrictHostKeyChecking=no -i my_secreat temp_file.txt miworld_monitor@172.17.0.1:~/nginx_config_01.txt
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S cp nginx_config_01.txt /home/miworld_monitor/mn_con/nginx.conf"
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S python3 nginx_changer.py manager"
[sudo] password for miworld_monitor: [sudo] password for miworld_monitor: docker-compose exec manager nginx -s reload
[31mERROR[0m: No container found for manager_1
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f13f42fa3a0>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f13f42fa3a0>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f13f42fa3a0>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
kjbviadifbdiugfia---------------------------------------------
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1604515755.937559
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1604515755.937559 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1604515755.937559 pythondocker_db_manager
7318b610321994a1f6e4177972ef8d557029cee598c538ec8b247e3176035ead
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1604515755.937559
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604515755.937559', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1604515755.937559
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604515755.937559', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1604515755.937559
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604515755.937559', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1604515755.937559
None
[sudo] password for miworld_monitor: docker start db_manager1604515755.937559
db_manager1604515755.937559
in socket
{'NETWORK_INTERFACE': {'MONITOR_NET': '10.0.0.12', 'MANAGER_IN_NET': '14.0.0.12', 'MANAGER_OUT_NET': '15.0.0.12'}, 'NGINX': {'IN_NET': '14.0.0.2', 'OUT_NET': '15.0.0.2', 'url_type': 'mn_con'}}
{"NETWORK_INTERFACE":{"MONITOR_NET":"10.0.0.12","MANAGER_IN_NET":"14.0.0.12","MANAGER_OUT_NET":"15.0.0.12"},"NGINX":{"IN_NET":"14.0.0.2","OUT_NET":"15.0.0.2","url_type":"mn_con"}}
0 10.0.0.4 socket json http://10.0.0.12:10/get_task_from_monitor {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager', 'ip': '10.0.0.12'}
{'configes': [{'url': '/PermissionPermissionBitMapper/viewset/Cassandracreate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandracreate'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandraupdate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandraupdate'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandradelete', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandradelete'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandralist', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandralist'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandraretrieve', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandraretrieve'}], 'url_type': 'mn_con'}
scp -o StrictHostKeyChecking=no -i my_secreat temp_file.txt miworld_monitor@172.17.0.1:~/nginx_config_01.txt
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S cp nginx_config_01.txt /home/miworld_monitor/mn_con/nginx.conf"
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S python3 nginx_changer.py manager"
[sudo] password for miworld_monitor: [sudo] password for miworld_monitor: docker-compose exec manager nginx -s reload
[31mERROR[0m: No container found for manager_1
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7fbb76b9bb50>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7fbb76b9bb50>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7fbb76b9bb50>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
kjbviadifbdiugfia---------------------------------------------
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperPostgresqlViewset', 'name_space': 'PermissionPermissionBitMapper.Postgresql_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1604516171.254546
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1604516171.254546 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1604516171.254546 pythondocker_db_manager
008a85f0a974a152b3512905dab5cba1e8416b6844d46df48f5025795a9ebd9b
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1604516171.254546
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604516171.254546', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1604516171.254546
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604516171.254546', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1604516171.254546
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604516171.254546', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1604516171.254546
None
[sudo] password for miworld_monitor: docker start db_manager1604516171.254546
db_manager1604516171.254546
in socket
{'NETWORK_INTERFACE': {'MONITOR_NET': '10.0.0.12', 'MANAGER_IN_NET': '14.0.0.12', 'MANAGER_OUT_NET': '15.0.0.12'}, 'NGINX': {'IN_NET': '14.0.0.2', 'OUT_NET': '15.0.0.2', 'url_type': 'mn_con'}}
{"NETWORK_INTERFACE":{"MONITOR_NET":"10.0.0.12","MANAGER_IN_NET":"14.0.0.12","MANAGER_OUT_NET":"15.0.0.12"},"NGINX":{"IN_NET":"14.0.0.2","OUT_NET":"15.0.0.2","url_type":"mn_con"}}
0 10.0.0.4 socket json http://10.0.0.12:10/get_task_from_monitor {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperPostgresqlViewset', 'name_space': 'PermissionPermissionBitMapper.Postgresql_viewset', 'container_type': 'db_manager', 'ip': '10.0.0.12'}
{'configes': [{'url': '/PermissionPermissionBitMapper/viewset/Postgresqlcreate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Postgresqlcreate'}, {'url': '/PermissionPermissionBitMapper/viewset/Postgresqlupdate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Postgresqlupdate'}, {'url': '/PermissionPermissionBitMapper/viewset/Postgresqldelete', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Postgresqldelete'}, {'url': '/PermissionPermissionBitMapper/viewset/Postgresqllist', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Postgresqllist'}, {'url': '/PermissionPermissionBitMapper/viewset/Postgresqlretrieve', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Postgresqlretrieve'}], 'url_type': 'mn_con'}
scp -o StrictHostKeyChecking=no -i my_secreat temp_file.txt miworld_monitor@172.17.0.1:~/nginx_config_01.txt
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S cp nginx_config_01.txt /home/miworld_monitor/mn_con/nginx.conf"
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S python3 nginx_changer.py manager"
[sudo] password for miworld_monitor: [sudo] password for miworld_monitor: docker-compose exec manager nginx -s reload
[31mERROR[0m: No container found for manager_1
in socket
{'NETWORK_INTERFACE': {'MONITOR_NET': '10.0.0.12', 'MANAGER_IN_NET': '14.0.0.12', 'MANAGER_OUT_NET': '15.0.0.12'}, 'NGINX': {'IN_NET': '14.0.0.2', 'OUT_NET': '15.0.0.2', 'url_type': 'mn_con'}}
{"NETWORK_INTERFACE":{"MONITOR_NET":"10.0.0.12","MANAGER_IN_NET":"14.0.0.12","MANAGER_OUT_NET":"15.0.0.12"},"NGINX":{"IN_NET":"14.0.0.2","OUT_NET":"15.0.0.2","url_type":"mn_con"}}
0 10.0.0.4 socket json http://10.0.0.12:10/get_task_from_monitor {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperPostgresqlViewset', 'name_space': 'PermissionPermissionBitMapper.Postgresql_viewset', 'container_type': 'db_manager', 'ip': '10.0.0.12', 'port': 11}
{'configes': [{'url': '/PermissionPermissionBitMapper/viewset/Postgresqlcreate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Postgresqlcreate'}, {'url': '/PermissionPermissionBitMapper/viewset/Postgresqlupdate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Postgresqlupdate'}, {'url': '/PermissionPermissionBitMapper/viewset/Postgresqldelete', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Postgresqldelete'}, {'url': '/PermissionPermissionBitMapper/viewset/Postgresqllist', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Postgresqllist'}, {'url': '/PermissionPermissionBitMapper/viewset/Postgresqlretrieve', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Postgresqlretrieve'}], 'url_type': 'mn_con'}
scp -o StrictHostKeyChecking=no -i my_secreat temp_file.txt miworld_monitor@172.17.0.1:~/nginx_config_01.txt
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S cp nginx_config_01.txt /home/miworld_monitor/mn_con/nginx.conf"
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S python3 nginx_changer.py manager"
[sudo] password for miworld_monitor: [sudo] password for miworld_monitor: docker-compose exec manager nginx -s reload
[31mERROR[0m: No container found for manager_1
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f4ca33fb190>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f4ca33fb190>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f4ca33fb190>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
kjbviadifbdiugfia---------------------------------------------
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperPostgresqlViewset', 'name_space': 'PermissionPermissionBitMapper.Postgresql_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1604518310.337749
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1604518310.337749 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1604518310.337749 pythondocker_db_manager
86cd2de9ae7804b8b4dcd2273119e97a2691e7929ed0315d217d5f908965902a
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1604518310.337749
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604518310.337749', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1604518310.337749
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604518310.337749', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1604518310.337749
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604518310.337749', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1604518310.337749
None
[sudo] password for miworld_monitor: docker start db_manager1604518310.337749
db_manager1604518310.337749
in socket
{'NETWORK_INTERFACE': {'MONITOR_NET': '10.0.0.12', 'MANAGER_IN_NET': '14.0.0.12', 'MANAGER_OUT_NET': '15.0.0.12'}, 'NGINX': {'IN_NET': '14.0.0.2', 'OUT_NET': '15.0.0.2', 'url_type': 'mn_con'}}
{"NETWORK_INTERFACE":{"MONITOR_NET":"10.0.0.12","MANAGER_IN_NET":"14.0.0.12","MANAGER_OUT_NET":"15.0.0.12"},"NGINX":{"IN_NET":"14.0.0.2","OUT_NET":"15.0.0.2","url_type":"mn_con"}}
0 10.0.0.4 socket json http://10.0.0.12:10/get_task_from_monitor {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperPostgresqlViewset', 'name_space': 'PermissionPermissionBitMapper.Postgresql_viewset', 'container_type': 'db_manager', 'ip': '10.0.0.12'}
{'configes': [{'url': '/PermissionPermissionBitMapper/viewset/Postgresqlcreate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Postgresqlcreate'}, {'url': '/PermissionPermissionBitMapper/viewset/Postgresqlupdate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Postgresqlupdate'}, {'url': '/PermissionPermissionBitMapper/viewset/Postgresqldelete', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Postgresqldelete'}, {'url': '/PermissionPermissionBitMapper/viewset/Postgresqllist', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Postgresqllist'}, {'url': '/PermissionPermissionBitMapper/viewset/Postgresqlretrieve', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Postgresqlretrieve'}], 'url_type': 'mn_con'}
scp -o StrictHostKeyChecking=no -i my_secreat temp_file.txt miworld_monitor@172.17.0.1:~/nginx_config_01.txt
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S cp nginx_config_01.txt /home/miworld_monitor/mn_con/nginx.conf"
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S python3 nginx_changer.py manager"
[sudo] password for miworld_monitor: [sudo] password for miworld_monitor: docker-compose exec manager nginx -s reload
[31mERROR[0m: No container found for manager_1
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f7fe0d74070>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f7fe0d74070>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f7fe0d74070>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
kjbviadifbdiugfia---------------------------------------------
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperPostgresqlViewset', 'name_space': 'PermissionPermissionBitMapper.Postgresql_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1604519580.770935
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1604519580.770935 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1604519580.770935 pythondocker_db_manager
583321e1cd4b049b04fd95ed9f28dcebf2c3af544dff587d02e1c0e81459f1dd
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1604519580.770935
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604519580.770935', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1604519580.770935
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604519580.770935', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1604519580.770935
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604519580.770935', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1604519580.770935
None
[sudo] password for miworld_monitor: docker start db_manager1604519580.770935
db_manager1604519580.770935
in socket
{'NETWORK_INTERFACE': {'MONITOR_NET': '10.0.0.12', 'MANAGER_IN_NET': '14.0.0.12', 'MANAGER_OUT_NET': '15.0.0.12'}, 'NGINX': {'IN_NET': '14.0.0.2', 'OUT_NET': '15.0.0.2', 'url_type': 'mn_con'}}
{"NETWORK_INTERFACE":{"MONITOR_NET":"10.0.0.12","MANAGER_IN_NET":"14.0.0.12","MANAGER_OUT_NET":"15.0.0.12"},"NGINX":{"IN_NET":"14.0.0.2","OUT_NET":"15.0.0.2","url_type":"mn_con"}}
0 10.0.0.4 socket json http://10.0.0.12:10/get_task_from_monitor {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperPostgresqlViewset', 'name_space': 'PermissionPermissionBitMapper.Postgresql_viewset', 'container_type': 'db_manager', 'ip': '10.0.0.12'}
{'configes': [{'url': '/PermissionPermissionBitMapper/viewset/Postgresqlcreate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Postgresqlcreate'}, {'url': '/PermissionPermissionBitMapper/viewset/Postgresqlupdate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Postgresqlupdate'}, {'url': '/PermissionPermissionBitMapper/viewset/Postgresqldelete', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Postgresqldelete'}, {'url': '/PermissionPermissionBitMapper/viewset/Postgresqllist', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Postgresqllist'}, {'url': '/PermissionPermissionBitMapper/viewset/Postgresqlretrieve', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Postgresqlretrieve'}], 'url_type': 'mn_con'}
scp -o StrictHostKeyChecking=no -i my_secreat temp_file.txt miworld_monitor@172.17.0.1:~/nginx_config_01.txt
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S cp nginx_config_01.txt /home/miworld_monitor/mn_con/nginx.conf"
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S python3 nginx_changer.py manager"
[sudo] password for miworld_monitor: [sudo] password for miworld_monitor: docker-compose exec manager nginx -s reload
[31mERROR[0m: No container found for manager_1
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f1ca2585970>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f1ca2585970>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f1ca2585970>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
kjbviadifbdiugfia---------------------------------------------
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperRedisViewset', 'name_space': 'PermissionPermissionBitMapper.Redis_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1604519698.635449
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1604519698.635449 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1604519698.635449 pythondocker_db_manager
fba3b75704abcafaa32e42b0e2335d1088d04e0f2a0e81afaa69ad076a4bd959
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1604519698.635449
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604519698.635449', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1604519698.635449
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604519698.635449', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1604519698.635449
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604519698.635449', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1604519698.635449
None
[sudo] password for miworld_monitor: docker start db_manager1604519698.635449
db_manager1604519698.635449
in socket
{'NETWORK_INTERFACE': {'MONITOR_NET': '10.0.0.12', 'MANAGER_IN_NET': '14.0.0.12', 'MANAGER_OUT_NET': '15.0.0.12'}, 'NGINX': {'IN_NET': '14.0.0.2', 'OUT_NET': '15.0.0.2', 'url_type': 'mn_con'}}
{"NETWORK_INTERFACE":{"MONITOR_NET":"10.0.0.12","MANAGER_IN_NET":"14.0.0.12","MANAGER_OUT_NET":"15.0.0.12"},"NGINX":{"IN_NET":"14.0.0.2","OUT_NET":"15.0.0.2","url_type":"mn_con"}}
0 10.0.0.4 socket json http://10.0.0.12:10/get_task_from_monitor {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperRedisViewset', 'name_space': 'PermissionPermissionBitMapper.Redis_viewset', 'container_type': 'db_manager', 'ip': '10.0.0.12'}
{'configes': [{'url': '/PermissionPermissionBitMapper/viewset/Rediscreate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Rediscreate'}, {'url': '/PermissionPermissionBitMapper/viewset/Redisupdate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Redisupdate'}, {'url': '/PermissionPermissionBitMapper/viewset/Redisdelete', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Redisdelete'}, {'url': '/PermissionPermissionBitMapper/viewset/Redislist', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Redislist'}, {'url': '/PermissionPermissionBitMapper/viewset/Redisretrieve', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Redisretrieve'}], 'url_type': 'mn_con'}
scp -o StrictHostKeyChecking=no -i my_secreat temp_file.txt miworld_monitor@172.17.0.1:~/nginx_config_01.txt
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S cp nginx_config_01.txt /home/miworld_monitor/mn_con/nginx.conf"
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S python3 nginx_changer.py manager"
[sudo] password for miworld_monitor: [sudo] password for miworld_monitor: docker-compose exec manager nginx -s reload
[31mERROR[0m: No container found for manager_1
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f835e7fd0d0>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f835e7fd0d0>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f835e7fd0d0>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
kjbviadifbdiugfia---------------------------------------------
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperRedisViewset', 'name_space': 'PermissionPermissionBitMapper.Redis_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1604563259.137796
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1604563259.137796 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1604563259.137796 pythondocker_db_manager
a5177bf25c965ce196cce103e5ecb8a72ee3e638532147e7451dd5f122fed786
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1604563259.137796
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604563259.137796', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1604563259.137796
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604563259.137796', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1604563259.137796
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604563259.137796', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1604563259.137796
None
[sudo] password for miworld_monitor: docker start db_manager1604563259.137796
db_manager1604563259.137796
in socket
{'NETWORK_INTERFACE': {'MONITOR_NET': '10.0.0.12', 'MANAGER_IN_NET': '14.0.0.12', 'MANAGER_OUT_NET': '15.0.0.12'}, 'NGINX': {'IN_NET': '14.0.0.2', 'OUT_NET': '15.0.0.2', 'url_type': 'mn_con'}}
{"NETWORK_INTERFACE":{"MONITOR_NET":"10.0.0.12","MANAGER_IN_NET":"14.0.0.12","MANAGER_OUT_NET":"15.0.0.12"},"NGINX":{"IN_NET":"14.0.0.2","OUT_NET":"15.0.0.2","url_type":"mn_con"}}
0 10.0.0.4 socket json http://10.0.0.12:10/get_task_from_monitor {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperRedisViewset', 'name_space': 'PermissionPermissionBitMapper.Redis_viewset', 'container_type': 'db_manager', 'ip': '10.0.0.12'}
{'configes': [{'url': '/PermissionPermissionBitMapper/viewset/Rediscreate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Rediscreate'}, {'url': '/PermissionPermissionBitMapper/viewset/Redisupdate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Redisupdate'}, {'url': '/PermissionPermissionBitMapper/viewset/Redisdelete', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Redisdelete'}, {'url': '/PermissionPermissionBitMapper/viewset/Redislist', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Redislist'}, {'url': '/PermissionPermissionBitMapper/viewset/Redisretrieve', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Redisretrieve'}], 'url_type': 'mn_con'}
scp -o StrictHostKeyChecking=no -i my_secreat temp_file.txt miworld_monitor@172.17.0.1:~/nginx_config_01.txt
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S cp nginx_config_01.txt /home/miworld_monitor/mn_con/nginx.conf"
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S python3 nginx_changer.py manager"
[sudo] password for miworld_monitor: [sudo] password for miworld_monitor: docker-compose exec manager nginx -s reload
[31mERROR[0m: No container found for manager_1
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f48b40f6e20>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f48b40f6e20>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f48b40f6e20>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
kjbviadifbdiugfia---------------------------------------------
task  {'service_models': 'UI', 'class_name': 'ChattingPostgresqlViewset', 'name_space': 'Chatting.Postgresql_viewset', 'container_type': 'db_manager'}
Try to assing a container
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7fc3043075b0>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7fc3043075b0>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7fc3043075b0>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
kjbviadifbdiugfia---------------------------------------------
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1604594436.709567
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1604594436.709567 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1604594436.709567 pythondocker_db_manager
f34ca331f557882b9d1b4e4d163369da503d52cbea888535be9728509f50ede9
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1604594436.709567
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604594436.709567', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1604594436.709567
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604594436.709567', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1604594436.709567
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604594436.709567', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1604594436.709567
None
[sudo] password for miworld_monitor: docker start db_manager1604594436.709567
db_manager1604594436.709567
in socket
{'NETWORK_INTERFACE': {'MONITOR_NET': '10.0.0.12', 'MANAGER_IN_NET': '14.0.0.12', 'MANAGER_OUT_NET': '15.0.0.12'}, 'NGINX': {'IN_NET': '14.0.0.2', 'OUT_NET': '15.0.0.2', 'url_type': 'mn_con'}}
{"NETWORK_INTERFACE":{"MONITOR_NET":"10.0.0.12","MANAGER_IN_NET":"14.0.0.12","MANAGER_OUT_NET":"15.0.0.12"},"NGINX":{"IN_NET":"14.0.0.2","OUT_NET":"15.0.0.2","url_type":"mn_con"}}
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionCassandraViewset', 'name_space': 'PermissionPermission.Cassandra_viewset', 'container_type': 'db_manager'}
Try to assing a container
0 10.0.0.4 socket json http://10.0.0.12:10/get_task_from_monitor {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager', 'ip': '10.0.0.12'}
{'configes': [{'url': '/PermissionPermissionBitMapper/viewset/Cassandracreate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandracreate'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandraupdate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandraupdate'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandradelete', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandradelete'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandralist', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandralist'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandraretrieve', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandraretrieve'}], 'url_type': 'mn_con'}
scp -o StrictHostKeyChecking=no -i my_secreat temp_file.txt miworld_monitor@172.17.0.1:~/nginx_config_01.txt
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S cp nginx_config_01.txt /home/miworld_monitor/mn_con/nginx.conf"
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S python3 nginx_changer.py manager"
[sudo] password for miworld_monitor: [sudo] password for miworld_monitor: docker-compose exec manager nginx -s reload
[31mERROR[0m: No container found for manager_1
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7fd14bccde20>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7fd14bccde20>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7fd14bccde20>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
kjbviadifbdiugfia---------------------------------------------
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager'}
Try to assing a container
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f2cdd60d970>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f2cdd60d970>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f2cdd60d970>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
kjbviadifbdiugfia---------------------------------------------
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1604654421.578526
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1604654421.578526 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1604654421.578526 pythondocker_db_manager
c9d59464225f7c9be2fbb9a5d0ae6434f2aeaaf33a1cbcb65f86277ef49dc197
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1604654421.578526
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604654421.578526', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1604654421.578526
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604654421.578526', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1604654421.578526
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604654421.578526', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1604654421.578526
None
[sudo] password for miworld_monitor: docker start db_manager1604654421.578526
db_manager1604654421.578526
in socket
{'NETWORK_INTERFACE': {'MONITOR_NET': '10.0.0.12', 'MANAGER_IN_NET': '14.0.0.12', 'MANAGER_OUT_NET': '15.0.0.12'}, 'NGINX': {'IN_NET': '14.0.0.2', 'OUT_NET': '15.0.0.2', 'url_type': 'mn_con'}}
{"NETWORK_INTERFACE":{"MONITOR_NET":"10.0.0.12","MANAGER_IN_NET":"14.0.0.12","MANAGER_OUT_NET":"15.0.0.12"},"NGINX":{"IN_NET":"14.0.0.2","OUT_NET":"15.0.0.2","url_type":"mn_con"}}
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionCassandraViewset', 'name_space': 'PermissionPermission.Cassandra_viewset', 'container_type': 'db_manager'}
Try to assing a container
0 10.0.0.4 socket json http://10.0.0.12:10/get_task_from_monitor {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager', 'ip': '10.0.0.12'}
{'configes': [{'url': '/PermissionPermissionBitMapper/viewset/Cassandracreate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandracreate'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandraupdate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandraupdate'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandradelete', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandradelete'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandralist', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandralist'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandraretrieve', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandraretrieve'}], 'url_type': 'mn_con'}
scp -o StrictHostKeyChecking=no -i my_secreat temp_file.txt miworld_monitor@172.17.0.1:~/nginx_config_01.txt
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S cp nginx_config_01.txt /home/miworld_monitor/mn_con/nginx.conf"
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S python3 nginx_changer.py manager"
[sudo] password for miworld_monitor: [sudo] password for miworld_monitor: docker-compose exec manager nginx -s reload
[31mERROR[0m: No container found for manager_1
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7efe28955400>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7efe28955400>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7efe28955400>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
kjbviadifbdiugfia---------------------------------------------
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperPostgresqlViewset', 'name_space': 'PermissionPermissionBitMapper.Postgresql_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1604656147.314444
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1604656147.314444 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1604656147.314444 pythondocker_db_manager
86ff603c6a106d17b437758654fa2926b6ff7b97c706e756e35de7d7b10db4f7
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1604656147.314444
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604656147.314444', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1604656147.314444
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604656147.314444', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1604656147.314444
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604656147.314444', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1604656147.314444
None
[sudo] password for miworld_monitor: docker start db_manager1604656147.314444
db_manager1604656147.314444
in socket
{'NETWORK_INTERFACE': {'MONITOR_NET': '10.0.0.12', 'MANAGER_IN_NET': '14.0.0.12', 'MANAGER_OUT_NET': '15.0.0.12'}, 'NGINX': {'IN_NET': '14.0.0.2', 'OUT_NET': '15.0.0.2', 'url_type': 'mn_con'}}
{"NETWORK_INTERFACE":{"MONITOR_NET":"10.0.0.12","MANAGER_IN_NET":"14.0.0.12","MANAGER_OUT_NET":"15.0.0.12"},"NGINX":{"IN_NET":"14.0.0.2","OUT_NET":"15.0.0.2","url_type":"mn_con"}}
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionPostgresqlViewset', 'name_space': 'PermissionPermission.Postgresql_viewset', 'container_type': 'db_manager'}
Try to assing a container
0 10.0.0.4 socket json http://10.0.0.12:10/get_task_from_monitor {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperPostgresqlViewset', 'name_space': 'PermissionPermissionBitMapper.Postgresql_viewset', 'container_type': 'db_manager', 'ip': '10.0.0.12'}
{'configes': [{'url': '/PermissionPermissionBitMapper/viewset/Postgresqlcreate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Postgresqlcreate'}, {'url': '/PermissionPermissionBitMapper/viewset/Postgresqlupdate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Postgresqlupdate'}, {'url': '/PermissionPermissionBitMapper/viewset/Postgresqldelete', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Postgresqldelete'}, {'url': '/PermissionPermissionBitMapper/viewset/Postgresqllist', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Postgresqllist'}, {'url': '/PermissionPermissionBitMapper/viewset/Postgresqlretrieve', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Postgresqlretrieve'}], 'url_type': 'mn_con'}
scp -o StrictHostKeyChecking=no -i my_secreat temp_file.txt miworld_monitor@172.17.0.1:~/nginx_config_01.txt
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S cp nginx_config_01.txt /home/miworld_monitor/mn_con/nginx.conf"
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S python3 nginx_changer.py manager"
[sudo] password for miworld_monitor: [sudo] password for miworld_monitor: docker-compose exec manager nginx -s reload
[31mERROR[0m: No container found for manager_1
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f9e8c24a370>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f9e8c24a370>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f9e8c24a370>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
kjbviadifbdiugfia---------------------------------------------
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperRedisViewset', 'name_space': 'PermissionPermissionBitMapper.Redis_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1604657584.002754
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1604657584.002754 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1604657584.002754 pythondocker_db_manager
165b839ca34fff57fb87244119274da55ea001e539d6d6e1064ab8de885af7e6
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1604657584.002754
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604657584.002754', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1604657584.002754
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604657584.002754', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1604657584.002754
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604657584.002754', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1604657584.002754
None
[sudo] password for miworld_monitor: docker start db_manager1604657584.002754
Error response from daemon: Address already in use
Error: failed to start containers: db_manager1604657584.002754
makefile:18: recipe for target 'run' failed
make: *** [run] Error 1
task  {'service_models': 'UI', 'class_name': 'PermissionPermission.Redis_viewset', 'name_space': 'PermissionPermission.Redis_viewset', 'container_type': 'db_manager'}
Try to assing a container
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7fb2cb1366d0>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7fb2cb1366d0>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7fb2cb1366d0>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
kjbviadifbdiugfia---------------------------------------------
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperRedisViewset', 'name_space': 'PermissionPermissionBitMapper.Redis_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1604657801.305431
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1604657801.305431 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1604657801.305431 pythondocker_db_manager
d889a157eade04a346172d58d8bf93461a8f934fe027ac38673f89a828fc36eb
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1604657801.305431
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604657801.305431', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1604657801.305431
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604657801.305431', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1604657801.305431
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604657801.305431', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1604657801.305431
None
[sudo] password for miworld_monitor: docker start db_manager1604657801.305431
db_manager1604657801.305431
in socket
{'NETWORK_INTERFACE': {'MONITOR_NET': '10.0.0.12', 'MANAGER_IN_NET': '14.0.0.12', 'MANAGER_OUT_NET': '15.0.0.12'}, 'NGINX': {'IN_NET': '14.0.0.2', 'OUT_NET': '15.0.0.2', 'url_type': 'mn_con'}}
{"NETWORK_INTERFACE":{"MONITOR_NET":"10.0.0.12","MANAGER_IN_NET":"14.0.0.12","MANAGER_OUT_NET":"15.0.0.12"},"NGINX":{"IN_NET":"14.0.0.2","OUT_NET":"15.0.0.2","url_type":"mn_con"}}
task  {'service_models': 'UI', 'class_name': 'PermissionPermission.Redis_viewset', 'name_space': 'PermissionPermission.Redis_viewset', 'container_type': 'db_manager'}
Try to assing a container
0 10.0.0.4 socket json http://10.0.0.12:10/get_task_from_monitor {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperRedisViewset', 'name_space': 'PermissionPermissionBitMapper.Redis_viewset', 'container_type': 'db_manager', 'ip': '10.0.0.12'}
{'configes': [{'url': '/PermissionPermissionBitMapper/viewset/Rediscreate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Rediscreate'}, {'url': '/PermissionPermissionBitMapper/viewset/Redisupdate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Redisupdate'}, {'url': '/PermissionPermissionBitMapper/viewset/Redisdelete', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Redisdelete'}, {'url': '/PermissionPermissionBitMapper/viewset/Redislist', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Redislist'}, {'url': '/PermissionPermissionBitMapper/viewset/Redisretrieve', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Redisretrieve'}], 'url_type': 'mn_con'}
scp -o StrictHostKeyChecking=no -i my_secreat temp_file.txt miworld_monitor@172.17.0.1:~/nginx_config_01.txt
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S cp nginx_config_01.txt /home/miworld_monitor/mn_con/nginx.conf"
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S python3 nginx_changer.py manager"
[sudo] password for miworld_monitor: [sudo] password for miworld_monitor: docker-compose exec manager nginx -s reload
[31mERROR[0m: No container found for manager_1
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7febad5e80d0>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7febad5e80d0>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7febad5e80d0>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
kjbviadifbdiugfia---------------------------------------------
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperRedisViewset', 'name_space': 'PermissionPermissionBitMapper.Redis_viewset', 'container_type': 'db_manager'}
Try to assing a container
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f74be8c9970>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f74be8c9970>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f74be8c9970>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
kjbviadifbdiugfia---------------------------------------------
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperRedisViewset', 'name_space': 'PermissionPermissionBitMapper.Redis_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1604684594.554826
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1604684594.554826 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1604684594.554826 pythondocker_db_manager
062af5bf1029e5ee299fef46748fe37b9622cc9a570608c7a76138f9654fd50e
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1604684594.554826
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604684594.554826', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1604684594.554826
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604684594.554826', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1604684594.554826
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604684594.554826', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1604684594.554826
None
[sudo] password for miworld_monitor: docker start db_manager1604684594.554826
db_manager1604684594.554826
in socket
{'NETWORK_INTERFACE': {'MONITOR_NET': '10.0.0.12', 'MANAGER_IN_NET': '14.0.0.12', 'MANAGER_OUT_NET': '15.0.0.12'}, 'NGINX': {'IN_NET': '14.0.0.2', 'OUT_NET': '15.0.0.2', 'url_type': 'mn_con'}}
{"NETWORK_INTERFACE":{"MONITOR_NET":"10.0.0.12","MANAGER_IN_NET":"14.0.0.12","MANAGER_OUT_NET":"15.0.0.12"},"NGINX":{"IN_NET":"14.0.0.2","OUT_NET":"15.0.0.2","url_type":"mn_con"}}
task  {'service_models': 'UI', 'class_name': 'PermissionPermission.Redis_viewset', 'name_space': 'PermissionPermission.Redis_viewset', 'container_type': 'db_manager'}
Try to assing a container
0 10.0.0.4 socket json http://10.0.0.12:10/get_task_from_monitor {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperRedisViewset', 'name_space': 'PermissionPermissionBitMapper.Redis_viewset', 'container_type': 'db_manager', 'ip': '10.0.0.12'}
{'configes': [{'url': '/PermissionPermissionBitMapper/viewset/Rediscreate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Rediscreate'}, {'url': '/PermissionPermissionBitMapper/viewset/Redisupdate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Redisupdate'}, {'url': '/PermissionPermissionBitMapper/viewset/Redisdelete', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Redisdelete'}, {'url': '/PermissionPermissionBitMapper/viewset/Redislist', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Redislist'}, {'url': '/PermissionPermissionBitMapper/viewset/Redisretrieve', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Redisretrieve'}], 'url_type': 'mn_con'}
scp -o StrictHostKeyChecking=no -i my_secreat temp_file.txt miworld_monitor@172.17.0.1:~/nginx_config_01.txt
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S cp nginx_config_01.txt /home/miworld_monitor/mn_con/nginx.conf"
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S python3 nginx_changer.py manager"
[sudo] password for miworld_monitor: [sudo] password for miworld_monitor: docker-compose exec manager nginx -s reload
[31mERROR[0m: No container found for manager_1
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7fdffdbab0d0>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7fdffdbab0d0>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7fdffdbab0d0>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
kjbviadifbdiugfia---------------------------------------------
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperRedisViewset', 'name_space': 'PermissionPermissionBitMapper.Redis_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1604686304.89101
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1604686304.89101 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1604686304.89101 pythondocker_db_manager
11f63720bb9e5ad570db25b4450916f6e2af70c41e41c3981c617624d1ac38c9
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1604686304.89101
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604686304.89101', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1604686304.89101
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604686304.89101', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1604686304.89101
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604686304.89101', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1604686304.89101
None
[sudo] password for miworld_monitor: docker start db_manager1604686304.89101
Error response from daemon: Address already in use
Error: failed to start containers: db_manager1604686304.89101
makefile:18: recipe for target 'run' failed
make: *** [run] Error 1
task  {'service_models': 'UI', 'class_name': 'PermissionPermission.Redis_viewset', 'name_space': 'PermissionPermission.Redis_viewset', 'container_type': 'db_manager'}
Try to assing a container
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f618f937850>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f618f937850>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f618f937850>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
kjbviadifbdiugfia---------------------------------------------
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperRedisViewset', 'name_space': 'PermissionPermissionBitMapper.Redis_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1604686417.504747
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1604686417.504747 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1604686417.504747 pythondocker_db_manager
10dc9000733f9de5be906aea76a9bde4dac1e64905c160e580fb3c38be9be307
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1604686417.504747
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604686417.504747', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1604686417.504747
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604686417.504747', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1604686417.504747
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604686417.504747', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1604686417.504747
None
[sudo] password for miworld_monitor: docker start db_manager1604686417.504747
db_manager1604686417.504747
in socket
{'NETWORK_INTERFACE': {'MONITOR_NET': '10.0.0.12', 'MANAGER_IN_NET': '14.0.0.12', 'MANAGER_OUT_NET': '15.0.0.12'}, 'NGINX': {'IN_NET': '14.0.0.2', 'OUT_NET': '15.0.0.2', 'url_type': 'mn_con'}}
{"NETWORK_INTERFACE":{"MONITOR_NET":"10.0.0.12","MANAGER_IN_NET":"14.0.0.12","MANAGER_OUT_NET":"15.0.0.12"},"NGINX":{"IN_NET":"14.0.0.2","OUT_NET":"15.0.0.2","url_type":"mn_con"}}
task  {'service_models': 'UI', 'class_name': 'PermissionPermission.Redis_viewset', 'name_space': 'PermissionPermission.Redis_viewset', 'container_type': 'db_manager'}
Try to assing a container
0 10.0.0.4 socket json http://10.0.0.12:10/get_task_from_monitor {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperRedisViewset', 'name_space': 'PermissionPermissionBitMapper.Redis_viewset', 'container_type': 'db_manager', 'ip': '10.0.0.12'}
{'configes': [{'url': '/PermissionPermissionBitMapper/viewset/Rediscreate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Rediscreate'}, {'url': '/PermissionPermissionBitMapper/viewset/Redisupdate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Redisupdate'}, {'url': '/PermissionPermissionBitMapper/viewset/Redisdelete', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Redisdelete'}, {'url': '/PermissionPermissionBitMapper/viewset/Redislist', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Redislist'}, {'url': '/PermissionPermissionBitMapper/viewset/Redisretrieve', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Redisretrieve'}], 'url_type': 'mn_con'}
scp -o StrictHostKeyChecking=no -i my_secreat temp_file.txt miworld_monitor@172.17.0.1:~/nginx_config_01.txt
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S cp nginx_config_01.txt /home/miworld_monitor/mn_con/nginx.conf"
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S python3 nginx_changer.py manager"
[sudo] password for miworld_monitor: [sudo] password for miworld_monitor: docker-compose exec manager nginx -s reload
[31mERROR[0m: No container found for manager_1
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f52b9cc9d30>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f52b9cc9d30>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f52b9cc9d30>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
kjbviadifbdiugfia---------------------------------------------
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperRedisViewset', 'name_space': 'PermissionPermissionBitMapper.Redis_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1604687276.415883
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1604687276.415883 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1604687276.415883 pythondocker_db_manager
6e0bc0da97d45d267584469fb0910c66ac87cd533dd793bd39f725d3d7049a4f
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1604687276.415883
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604687276.415883', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1604687276.415883
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604687276.415883', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1604687276.415883
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604687276.415883', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1604687276.415883
None
[sudo] password for miworld_monitor: docker start db_manager1604687276.415883
db_manager1604687276.415883
in socket
{'NETWORK_INTERFACE': {'MONITOR_NET': '10.0.0.12', 'MANAGER_IN_NET': '14.0.0.12', 'MANAGER_OUT_NET': '15.0.0.12'}, 'NGINX': {'IN_NET': '14.0.0.2', 'OUT_NET': '15.0.0.2', 'url_type': 'mn_con'}}
{"NETWORK_INTERFACE":{"MONITOR_NET":"10.0.0.12","MANAGER_IN_NET":"14.0.0.12","MANAGER_OUT_NET":"15.0.0.12"},"NGINX":{"IN_NET":"14.0.0.2","OUT_NET":"15.0.0.2","url_type":"mn_con"}}
task  {'service_models': 'UI', 'class_name': 'PermissionPermission.Redis_viewset', 'name_space': 'PermissionPermission.Redis_viewset', 'container_type': 'db_manager'}
Try to assing a container
0 10.0.0.4 socket json http://10.0.0.12:10/get_task_from_monitor {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperRedisViewset', 'name_space': 'PermissionPermissionBitMapper.Redis_viewset', 'container_type': 'db_manager', 'ip': '10.0.0.12'}
{'configes': [{'url': '/PermissionPermissionBitMapper/viewset/Rediscreate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Rediscreate'}, {'url': '/PermissionPermissionBitMapper/viewset/Redisupdate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Redisupdate'}, {'url': '/PermissionPermissionBitMapper/viewset/Redisdelete', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Redisdelete'}, {'url': '/PermissionPermissionBitMapper/viewset/Redislist', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Redislist'}, {'url': '/PermissionPermissionBitMapper/viewset/Redisretrieve', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Redisretrieve'}], 'url_type': 'mn_con'}
scp -o StrictHostKeyChecking=no -i my_secreat temp_file.txt miworld_monitor@172.17.0.1:~/nginx_config_01.txt
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S cp nginx_config_01.txt /home/miworld_monitor/mn_con/nginx.conf"
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S python3 nginx_changer.py manager"
[sudo] password for miworld_monitor: [sudo] password for miworld_monitor: docker-compose exec manager nginx -s reload
[31mERROR[0m: No container found for manager_1
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f708cebc0d0>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f708cebc0d0>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f708cebc0d0>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
kjbviadifbdiugfia---------------------------------------------
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperRedisViewset', 'name_space': 'PermissionPermissionBitMapper.Redis_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1604687975.940704
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1604687975.940704 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1604687975.940704 pythondocker_db_manager
4a567dc81440ff05db8d8372f403ef34ce0f212eff7655c9d55fab7f5bcde978
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1604687975.940704
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604687975.940704', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1604687975.940704
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604687975.940704', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1604687975.940704
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604687975.940704', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1604687975.940704
None
[sudo] password for miworld_monitor: docker start db_manager1604687975.940704
db_manager1604687975.940704
in socket
{'NETWORK_INTERFACE': {'MONITOR_NET': '10.0.0.12', 'MANAGER_IN_NET': '14.0.0.12', 'MANAGER_OUT_NET': '15.0.0.12'}, 'NGINX': {'IN_NET': '14.0.0.2', 'OUT_NET': '15.0.0.2', 'url_type': 'mn_con'}}
{"NETWORK_INTERFACE":{"MONITOR_NET":"10.0.0.12","MANAGER_IN_NET":"14.0.0.12","MANAGER_OUT_NET":"15.0.0.12"},"NGINX":{"IN_NET":"14.0.0.2","OUT_NET":"15.0.0.2","url_type":"mn_con"}}
task  {'service_models': 'UI', 'class_name': 'PermissionPermission.Redis_viewset', 'name_space': 'PermissionPermission.Redis_viewset', 'container_type': 'db_manager'}
Try to assing a container
0 10.0.0.4 socket json http://10.0.0.12:10/get_task_from_monitor {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperRedisViewset', 'name_space': 'PermissionPermissionBitMapper.Redis_viewset', 'container_type': 'db_manager', 'ip': '10.0.0.12'}
{'configes': [{'url': '/PermissionPermissionBitMapper/viewset/Rediscreate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Rediscreate'}, {'url': '/PermissionPermissionBitMapper/viewset/Redisupdate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Redisupdate'}, {'url': '/PermissionPermissionBitMapper/viewset/Redisdelete', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Redisdelete'}, {'url': '/PermissionPermissionBitMapper/viewset/Redislist', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Redislist'}, {'url': '/PermissionPermissionBitMapper/viewset/Redisretrieve', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Redisretrieve'}], 'url_type': 'mn_con'}
scp -o StrictHostKeyChecking=no -i my_secreat temp_file.txt miworld_monitor@172.17.0.1:~/nginx_config_01.txt
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S cp nginx_config_01.txt /home/miworld_monitor/mn_con/nginx.conf"
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S python3 nginx_changer.py manager"
[sudo] password for miworld_monitor: [sudo] password for miworld_monitor: docker-compose exec manager nginx -s reload
[31mERROR[0m: No container found for manager_1
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7fe7c02a76a0>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7fe7c02a76a0>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7fe7c02a76a0>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
kjbviadifbdiugfia---------------------------------------------
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1604688198.830711
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1604688198.830711 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1604688198.830711 pythondocker_db_manager
13d2409d215ca5c4b5c88322833c241770af6b2e005a04e9ac2ca2776c1cebc3
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1604688198.830711
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604688198.830711', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1604688198.830711
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604688198.830711', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1604688198.830711
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604688198.830711', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1604688198.830711
None
[sudo] password for miworld_monitor: docker start db_manager1604688198.830711
db_manager1604688198.830711
in socket
{'NETWORK_INTERFACE': {'MONITOR_NET': '10.0.0.12', 'MANAGER_IN_NET': '14.0.0.12', 'MANAGER_OUT_NET': '15.0.0.12'}, 'NGINX': {'IN_NET': '14.0.0.2', 'OUT_NET': '15.0.0.2', 'url_type': 'mn_con'}}
{"NETWORK_INTERFACE":{"MONITOR_NET":"10.0.0.12","MANAGER_IN_NET":"14.0.0.12","MANAGER_OUT_NET":"15.0.0.12"},"NGINX":{"IN_NET":"14.0.0.2","OUT_NET":"15.0.0.2","url_type":"mn_con"}}
0 10.0.0.4 socket json http://10.0.0.12:10/get_task_from_monitor {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager', 'ip': '10.0.0.12'}
{'configes': [{'url': '/PermissionPermissionBitMapper/viewset/Cassandracreate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandracreate'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandraupdate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandraupdate'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandradelete', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandradelete'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandralist', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandralist'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandraretrieve', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandraretrieve'}], 'url_type': 'mn_con'}
scp -o StrictHostKeyChecking=no -i my_secreat temp_file.txt miworld_monitor@172.17.0.1:~/nginx_config_01.txt
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S cp nginx_config_01.txt /home/miworld_monitor/mn_con/nginx.conf"
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S python3 nginx_changer.py manager"
[sudo] password for miworld_monitor: [sudo] password for miworld_monitor: docker-compose exec manager nginx -s reload
[31mERROR[0m: No container found for manager_1
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f1d2eb6de20>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f1d2eb6de20>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f1d2eb6de20>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
kjbviadifbdiugfia---------------------------------------------
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager'}
Try to assing a container
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f99228cb670>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f99228cb670>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f99228cb670>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
kjbviadifbdiugfia---------------------------------------------
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1604733491.152251
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1604733491.152251 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1604733491.152251 pythondocker_db_manager
e217c5cc2966838f48752d8db43b7f979592e2944ed6933d50c0c867d501b964
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1604733491.152251
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604733491.152251', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1604733491.152251
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604733491.152251', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1604733491.152251
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604733491.152251', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1604733491.152251
None
[sudo] password for miworld_monitor: docker start db_manager1604733491.152251
db_manager1604733491.152251
in socket
{'NETWORK_INTERFACE': {'MONITOR_NET': '10.0.0.12', 'MANAGER_IN_NET': '14.0.0.12', 'MANAGER_OUT_NET': '15.0.0.12'}, 'NGINX': {'IN_NET': '14.0.0.2', 'OUT_NET': '15.0.0.2', 'url_type': 'mn_con'}}
{"NETWORK_INTERFACE":{"MONITOR_NET":"10.0.0.12","MANAGER_IN_NET":"14.0.0.12","MANAGER_OUT_NET":"15.0.0.12"},"NGINX":{"IN_NET":"14.0.0.2","OUT_NET":"15.0.0.2","url_type":"mn_con"}}
0 10.0.0.4 socket json http://10.0.0.12:10/get_task_from_monitor {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager', 'ip': '10.0.0.12'}
{'configes': [{'url': '/PermissionPermissionBitMapper/viewset/Cassandracreate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandracreate'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandraupdate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandraupdate'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandradelete', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandradelete'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandralist', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandralist'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandraretrieve', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandraretrieve'}], 'url_type': 'mn_con'}
scp -o StrictHostKeyChecking=no -i my_secreat temp_file.txt miworld_monitor@172.17.0.1:~/nginx_config_01.txt
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S cp nginx_config_01.txt /home/miworld_monitor/mn_con/nginx.conf"
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S python3 nginx_changer.py manager"
[sudo] password for miworld_monitor: [sudo] password for miworld_monitor: docker-compose exec manager nginx -s reload
[31mERROR[0m: No container found for manager_1
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f2d35382370>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f2d35382370>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f2d35382370>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
kjbviadifbdiugfia---------------------------------------------
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager'}
Try to assing a container
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f5e1b31f370>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f5e1b31f370>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f5e1b31f370>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
kjbviadifbdiugfia---------------------------------------------
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1604857755.515108
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1604857755.515108 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1604857755.515108 pythondocker_db_manager
862219f9519db561383bf5ae16f373d32b6adb528d2e6a3e970e17b019e906e4
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1604857755.515108
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604857755.515108', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1604857755.515108
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604857755.515108', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1604857755.515108
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604857755.515108', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1604857755.515108
None
[sudo] password for miworld_monitor: docker start db_manager1604857755.515108
db_manager1604857755.515108
in socket
{'NETWORK_INTERFACE': {'MONITOR_NET': '10.0.0.12', 'MANAGER_IN_NET': '14.0.0.12', 'MANAGER_OUT_NET': '15.0.0.12'}, 'NGINX': {'IN_NET': '14.0.0.2', 'OUT_NET': '15.0.0.2', 'url_type': 'mn_con'}}
{"NETWORK_INTERFACE":{"MONITOR_NET":"10.0.0.12","MANAGER_IN_NET":"14.0.0.12","MANAGER_OUT_NET":"15.0.0.12"},"NGINX":{"IN_NET":"14.0.0.2","OUT_NET":"15.0.0.2","url_type":"mn_con"}}
0 10.0.0.4 socket json http://10.0.0.12:10/get_task_from_monitor {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager', 'ip': '10.0.0.12'}
{'configes': [{'url': '/PermissionPermissionBitMapper/viewset/Cassandracreate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandracreate'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandraupdate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandraupdate'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandradelete', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandradelete'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandralist', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandralist'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandraretrieve', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandraretrieve'}], 'url_type': 'mn_con'}
scp -o StrictHostKeyChecking=no -i my_secreat temp_file.txt miworld_monitor@172.17.0.1:~/nginx_config_01.txt
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S cp nginx_config_01.txt /home/miworld_monitor/mn_con/nginx.conf"
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S python3 nginx_changer.py manager"
[sudo] password for miworld_monitor: [sudo] password for miworld_monitor: docker-compose exec manager nginx -s reload
[31mERROR[0m: No container found for manager_1
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7fd928d02400>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7fd928d02400>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7fd928d02400>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
kjbviadifbdiugfia---------------------------------------------
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1604859450.209824
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1604859450.209824 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1604859450.209824 pythondocker_db_manager
0904638f6d40a4ad891644434680403aab086294d4929d1483f3f1dde9ab199e
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1604859450.209824
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604859450.209824', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1604859450.209824
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604859450.209824', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1604859450.209824
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604859450.209824', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1604859450.209824
None
[sudo] password for miworld_monitor: docker start db_manager1604859450.209824
db_manager1604859450.209824
in socket
{'NETWORK_INTERFACE': {'MONITOR_NET': '10.0.0.12', 'MANAGER_IN_NET': '14.0.0.12', 'MANAGER_OUT_NET': '15.0.0.12'}, 'NGINX': {'IN_NET': '14.0.0.2', 'OUT_NET': '15.0.0.2', 'url_type': 'mn_con'}}
{"NETWORK_INTERFACE":{"MONITOR_NET":"10.0.0.12","MANAGER_IN_NET":"14.0.0.12","MANAGER_OUT_NET":"15.0.0.12"},"NGINX":{"IN_NET":"14.0.0.2","OUT_NET":"15.0.0.2","url_type":"mn_con"}}
0 10.0.0.4 socket json http://10.0.0.12:10/get_task_from_monitor {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager', 'ip': '10.0.0.12'}
{'configes': [{'url': '/PermissionPermissionBitMapper/viewset/Cassandracreate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandracreate'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandraupdate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandraupdate'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandradelete', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandradelete'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandralist', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandralist'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandraretrieve', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandraretrieve'}], 'url_type': 'mn_con'}
scp -o StrictHostKeyChecking=no -i my_secreat temp_file.txt miworld_monitor@172.17.0.1:~/nginx_config_01.txt
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S cp nginx_config_01.txt /home/miworld_monitor/mn_con/nginx.conf"
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S python3 nginx_changer.py manager"
[sudo] password for miworld_monitor: [sudo] password for miworld_monitor: Traceback (most recent call last):
  File "nginx_changer.py", line 15, in <module>
    nginx_configuration_apply(sys.argv[1])
  File "nginx_changer.py", line 6, in nginx_configuration_apply
    nginx_container_name = container[nginx_container_name]
KeyError: 'manager'
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f3c563f4400>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f3c563f4400>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f3c563f4400>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
kjbviadifbdiugfia---------------------------------------------
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1604859584.269087
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1604859584.269087 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1604859584.269087 pythondocker_db_manager
2e0b67943326025a93e7efee9835158192a71236ee1bd0faabfd7273cce85fa1
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1604859584.269087
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604859584.269087', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1604859584.269087
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604859584.269087', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1604859584.269087
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604859584.269087', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1604859584.269087
None
[sudo] password for miworld_monitor: docker start db_manager1604859584.269087
db_manager1604859584.269087
in socket
{'NETWORK_INTERFACE': {'MONITOR_NET': '10.0.0.12', 'MANAGER_IN_NET': '14.0.0.12', 'MANAGER_OUT_NET': '15.0.0.12'}, 'NGINX': {'IN_NET': '14.0.0.2', 'OUT_NET': '15.0.0.2', 'url_type': 'mn_con'}}
{"NETWORK_INTERFACE":{"MONITOR_NET":"10.0.0.12","MANAGER_IN_NET":"14.0.0.12","MANAGER_OUT_NET":"15.0.0.12"},"NGINX":{"IN_NET":"14.0.0.2","OUT_NET":"15.0.0.2","url_type":"mn_con"}}
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7fcbc9a9c0d0>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7fcbc9a9c0d0>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7fcbc9a9c0d0>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
kjbviadifbdiugfia---------------------------------------------
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager'}
Try to assing a container
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f7ac3a5d040>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f7ac3a5d040>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f7ac3a5d040>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
kjbviadifbdiugfia---------------------------------------------
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1604859665.080937
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1604859665.080937 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1604859665.080937 pythondocker_db_manager
f3976065db0ec7adeba9b31f268b5ec9a2e6bb222423db54a4561acc9d978b5f
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1604859665.080937
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604859665.080937', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1604859665.080937
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604859665.080937', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1604859665.080937
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604859665.080937', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1604859665.080937
None
[sudo] password for miworld_monitor: docker start db_manager1604859665.080937
db_manager1604859665.080937
in socket
{'NETWORK_INTERFACE': {'MONITOR_NET': '10.0.0.12', 'MANAGER_IN_NET': '14.0.0.12', 'MANAGER_OUT_NET': '15.0.0.12'}, 'NGINX': {'IN_NET': '14.0.0.2', 'OUT_NET': '15.0.0.2', 'url_type': 'mn_con'}}
{"NETWORK_INTERFACE":{"MONITOR_NET":"10.0.0.12","MANAGER_IN_NET":"14.0.0.12","MANAGER_OUT_NET":"15.0.0.12"},"NGINX":{"IN_NET":"14.0.0.2","OUT_NET":"15.0.0.2","url_type":"mn_con"}}
0 10.0.0.4 socket json http://10.0.0.12:10/get_task_from_monitor {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager', 'ip': '10.0.0.12'}
{'configes': [{'url': '/PermissionPermissionBitMapper/viewset/Cassandracreate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandracreate'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandraupdate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandraupdate'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandradelete', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandradelete'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandralist', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandralist'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandraretrieve', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandraretrieve'}], 'url_type': 'mn_con'}
scp -o StrictHostKeyChecking=no -i my_secreat temp_file.txt miworld_monitor@172.17.0.1:~/nginx_config_01.txt
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S cp nginx_config_01.txt /home/miworld_monitor/mn_con/nginx.conf"
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S python3 nginx_changer.py manager"
[sudo] password for miworld_monitor: [sudo] password for miworld_monitor: docker exec nginx_manager_connector_02 nginx -s reload
2020/11/08 18:21:32 [notice] 19#19: signal process started
in socket
{'NETWORK_INTERFACE': {'MONITOR_NET': '10.0.0.12', 'MANAGER_IN_NET': '14.0.0.12', 'MANAGER_OUT_NET': '15.0.0.12'}, 'NGINX': {'IN_NET': '14.0.0.2', 'OUT_NET': '15.0.0.2', 'url_type': 'mn_con'}}
{"NETWORK_INTERFACE":{"MONITOR_NET":"10.0.0.12","MANAGER_IN_NET":"14.0.0.12","MANAGER_OUT_NET":"15.0.0.12"},"NGINX":{"IN_NET":"14.0.0.2","OUT_NET":"15.0.0.2","url_type":"mn_con"}}
0 10.0.0.4 socket json http://10.0.0.12:10/get_task_from_monitor {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager', 'ip': '10.0.0.12', 'port': 11}
{'configes': [{'url': '/PermissionPermissionBitMapper/viewset/Cassandracreate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandracreate'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandraupdate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandraupdate'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandradelete', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandradelete'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandralist', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandralist'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandraretrieve', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandraretrieve'}], 'url_type': 'mn_con'}
scp -o StrictHostKeyChecking=no -i my_secreat temp_file.txt miworld_monitor@172.17.0.1:~/nginx_config_01.txt
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S cp nginx_config_01.txt /home/miworld_monitor/mn_con/nginx.conf"
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S python3 nginx_changer.py manager"
[sudo] password for miworld_monitor: [sudo] password for miworld_monitor: docker exec nginx_manager_connector_02 nginx -s reload
2020/11/08 19:09:27 [notice] 25#25: signal process started
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f4a373bb0d0>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f4a373bb0d0>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f4a373bb0d0>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
kjbviadifbdiugfia---------------------------------------------
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperPostgresqlViewset', 'name_space': 'PermissionPermissionBitMapper.Postgresql_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1604862613.403781
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1604862613.403781 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1604862613.403781 pythondocker_db_manager
fe646e3a29dc6a36101fbc5acb04912cdc1c5f17431fcb3195f7a460d3166def
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1604862613.403781
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604862613.403781', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1604862613.403781
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604862613.403781', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1604862613.403781
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604862613.403781', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1604862613.403781
None
[sudo] password for miworld_monitor: docker start db_manager1604862613.403781
Error response from daemon: Address already in use
Error: failed to start containers: db_manager1604862613.403781
makefile:18: recipe for target 'run' failed
make: *** [run] Error 1
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f6b7c2f3eb0>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f6b7c2f3eb0>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f6b7c2f3eb0>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
kjbviadifbdiugfia---------------------------------------------
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperPostgresqlViewset', 'name_space': 'PermissionPermissionBitMapper.Postgresql_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1604862792.973472
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1604862792.973472 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1604862792.973472 pythondocker_db_manager
3272feabc3a8e31d23128422d500c0e79cbfc9a2af9bb03deb3397d4104e8fa1
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1604862792.973472
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604862792.973472', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1604862792.973472
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604862792.973472', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1604862792.973472
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604862792.973472', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1604862792.973472
None
[sudo] password for miworld_monitor: docker start db_manager1604862792.973472
db_manager1604862792.973472
in socket
{'NETWORK_INTERFACE': {'MONITOR_NET': '10.0.0.12', 'MANAGER_IN_NET': '14.0.0.12', 'MANAGER_OUT_NET': '15.0.0.12'}, 'NGINX': {'IN_NET': '14.0.0.2', 'OUT_NET': '15.0.0.2', 'url_type': 'mn_con'}}
{"NETWORK_INTERFACE":{"MONITOR_NET":"10.0.0.12","MANAGER_IN_NET":"14.0.0.12","MANAGER_OUT_NET":"15.0.0.12"},"NGINX":{"IN_NET":"14.0.0.2","OUT_NET":"15.0.0.2","url_type":"mn_con"}}
0 10.0.0.4 socket json http://10.0.0.12:10/get_task_from_monitor {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperPostgresqlViewset', 'name_space': 'PermissionPermissionBitMapper.Postgresql_viewset', 'container_type': 'db_manager', 'ip': '10.0.0.12'}
{'configes': [{'url': '/PermissionPermissionBitMapper/viewset/Postgresqlcreate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Postgresqlcreate'}, {'url': '/PermissionPermissionBitMapper/viewset/Postgresqlupdate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Postgresqlupdate'}, {'url': '/PermissionPermissionBitMapper/viewset/Postgresqldelete', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Postgresqldelete'}, {'url': '/PermissionPermissionBitMapper/viewset/Postgresqllist', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Postgresqllist'}, {'url': '/PermissionPermissionBitMapper/viewset/Postgresqlretrieve', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Postgresqlretrieve'}], 'url_type': 'mn_con'}
scp -o StrictHostKeyChecking=no -i my_secreat temp_file.txt miworld_monitor@172.17.0.1:~/nginx_config_01.txt
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S cp nginx_config_01.txt /home/miworld_monitor/mn_con/nginx.conf"
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S python3 nginx_changer.py manager"
[sudo] password for miworld_monitor: [sudo] password for miworld_monitor: docker exec nginx_manager_connector_02 nginx -s reload
2020/11/08 19:13:40 [notice] 31#31: signal process started
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f54e23a00d0>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f54e23a00d0>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f54e23a00d0>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
kjbviadifbdiugfia---------------------------------------------
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperPostgresqlViewset', 'name_space': 'PermissionPermissionBitMapper.Postgresql_viewset', 'container_type': 'db_manager'}
Try to assing a container
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f795605d3a0>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f795605d3a0>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f795605d3a0>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
kjbviadifbdiugfia---------------------------------------------
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperPostgresqlViewset', 'name_space': 'PermissionPermissionBitMapper.Postgresql_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1604906046.011575
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1604906046.011575 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1604906046.011575 pythondocker_db_manager
eae97175f297541809d3e15f21fbdf9f9ef1775dd8689ebee7bbba9dc209a0c1
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1604906046.011575
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604906046.011575', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1604906046.011575
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604906046.011575', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1604906046.011575
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604906046.011575', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1604906046.011575
None
[sudo] password for miworld_monitor: docker start db_manager1604906046.011575
db_manager1604906046.011575
in socket
{'NETWORK_INTERFACE': {'MONITOR_NET': '10.0.0.12', 'MANAGER_IN_NET': '14.0.0.12', 'MANAGER_OUT_NET': '15.0.0.12'}, 'NGINX': {'IN_NET': '14.0.0.2', 'OUT_NET': '15.0.0.2', 'url_type': 'mn_con'}}
{"NETWORK_INTERFACE":{"MONITOR_NET":"10.0.0.12","MANAGER_IN_NET":"14.0.0.12","MANAGER_OUT_NET":"15.0.0.12"},"NGINX":{"IN_NET":"14.0.0.2","OUT_NET":"15.0.0.2","url_type":"mn_con"}}
0 10.0.0.4 socket json http://10.0.0.12:10/get_task_from_monitor {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperPostgresqlViewset', 'name_space': 'PermissionPermissionBitMapper.Postgresql_viewset', 'container_type': 'db_manager', 'ip': '10.0.0.12'}
{'configes': [{'url': '/PermissionPermissionBitMapper/viewset/Postgresqlcreate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Postgresqlcreate'}, {'url': '/PermissionPermissionBitMapper/viewset/Postgresqlupdate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Postgresqlupdate'}, {'url': '/PermissionPermissionBitMapper/viewset/Postgresqldelete', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Postgresqldelete'}, {'url': '/PermissionPermissionBitMapper/viewset/Postgresqllist', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Postgresqllist'}, {'url': '/PermissionPermissionBitMapper/viewset/Postgresqlretrieve', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Postgresqlretrieve'}], 'url_type': 'mn_con'}
scp -o StrictHostKeyChecking=no -i my_secreat temp_file.txt miworld_monitor@172.17.0.1:~/nginx_config_01.txt
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S cp nginx_config_01.txt /home/miworld_monitor/mn_con/nginx.conf"
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S python3 nginx_changer.py manager"
[sudo] password for miworld_monitor: [sudo] password for miworld_monitor: docker exec nginx_manager_connector_02 nginx -s reload
2020/11/09 07:14:33 [notice] 7#7: signal process started
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7fed2c39ce20>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7fed2c39ce20>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7fed2c39ce20>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
kjbviadifbdiugfia---------------------------------------------
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperRedisViewset', 'name_space': 'PermissionPermissionBitMapper.Redis_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1604906431.715952
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1604906431.715952 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1604906431.715952 pythondocker_db_manager
9b0e15c6f8475435d42bf5051fe072ad1f0fbe820581e1aa68b1550a165b46b4
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1604906431.715952
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604906431.715952', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1604906431.715952
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604906431.715952', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1604906431.715952
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604906431.715952', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1604906431.715952
None
[sudo] password for miworld_monitor: docker start db_manager1604906431.715952
db_manager1604906431.715952
in socket
{'NETWORK_INTERFACE': {'MONITOR_NET': '10.0.0.12', 'MANAGER_IN_NET': '14.0.0.12', 'MANAGER_OUT_NET': '15.0.0.12'}, 'NGINX': {'IN_NET': '14.0.0.2', 'OUT_NET': '15.0.0.2', 'url_type': 'mn_con'}}
{"NETWORK_INTERFACE":{"MONITOR_NET":"10.0.0.12","MANAGER_IN_NET":"14.0.0.12","MANAGER_OUT_NET":"15.0.0.12"},"NGINX":{"IN_NET":"14.0.0.2","OUT_NET":"15.0.0.2","url_type":"mn_con"}}
0 10.0.0.4 socket json http://10.0.0.12:10/get_task_from_monitor {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperRedisViewset', 'name_space': 'PermissionPermissionBitMapper.Redis_viewset', 'container_type': 'db_manager', 'ip': '10.0.0.12'}
{'configes': [{'url': '/PermissionPermissionBitMapper/viewset/Rediscreate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Rediscreate'}, {'url': '/PermissionPermissionBitMapper/viewset/Redisupdate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Redisupdate'}, {'url': '/PermissionPermissionBitMapper/viewset/Redisdelete', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Redisdelete'}, {'url': '/PermissionPermissionBitMapper/viewset/Redislist', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Redislist'}, {'url': '/PermissionPermissionBitMapper/viewset/Redisretrieve', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Redisretrieve'}], 'url_type': 'mn_con'}
scp -o StrictHostKeyChecking=no -i my_secreat temp_file.txt miworld_monitor@172.17.0.1:~/nginx_config_01.txt
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S cp nginx_config_01.txt /home/miworld_monitor/mn_con/nginx.conf"
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S python3 nginx_changer.py manager"
[sudo] password for miworld_monitor: [sudo] password for miworld_monitor: docker exec nginx_manager_connector_02 nginx -s reload
2020/11/09 07:20:58 [notice] 13#13: signal process started
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f5861dfb370>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f5861dfb370>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f5861dfb370>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
kjbviadifbdiugfia---------------------------------------------
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1604906701.7821
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1604906701.7821 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1604906701.7821 pythondocker_db_manager
127d813aeaace040b5855d69a58c6fa4eb83491314384d84f460f5b5cbfa911a
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1604906701.7821
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604906701.7821', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1604906701.7821
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604906701.7821', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1604906701.7821
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604906701.7821', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1604906701.7821
None
[sudo] password for miworld_monitor: docker start db_manager1604906701.7821
db_manager1604906701.7821
in socket
{'NETWORK_INTERFACE': {'MONITOR_NET': '10.0.0.12', 'MANAGER_IN_NET': '14.0.0.12', 'MANAGER_OUT_NET': '15.0.0.12'}, 'NGINX': {'IN_NET': '14.0.0.2', 'OUT_NET': '15.0.0.2', 'url_type': 'mn_con'}}
{"NETWORK_INTERFACE":{"MONITOR_NET":"10.0.0.12","MANAGER_IN_NET":"14.0.0.12","MANAGER_OUT_NET":"15.0.0.12"},"NGINX":{"IN_NET":"14.0.0.2","OUT_NET":"15.0.0.2","url_type":"mn_con"}}
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperPostgresqlViewset', 'name_space': 'PermissionPermissionBitMapper.Postgresql_viewset', 'container_type': 'db_manager'}
Try to assing a container
0 10.0.0.4 socket json http://10.0.0.12:10/get_task_from_monitor {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager', 'ip': '10.0.0.12'}
{'configes': [{'url': '/PermissionPermissionBitMapper/viewset/Cassandracreate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandracreate'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandraupdate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandraupdate'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandradelete', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandradelete'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandralist', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandralist'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandraretrieve', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandraretrieve'}], 'url_type': 'mn_con'}
scp -o StrictHostKeyChecking=no -i my_secreat temp_file.txt miworld_monitor@172.17.0.1:~/nginx_config_01.txt
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S cp nginx_config_01.txt /home/miworld_monitor/mn_con/nginx.conf"
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S python3 nginx_changer.py manager"
[sudo] password for miworld_monitor: [sudo] password for miworld_monitor: docker exec nginx_manager_connector_02 nginx -s reload
2020/11/09 07:25:30 [notice] 19#19: signal process started
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7fbcfaf0a5e0>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7fbcfaf0a5e0>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7fbcfaf0a5e0>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
kjbviadifbdiugfia---------------------------------------------
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager'}
Try to assing a container
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f7be80b40d0>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f7be80b40d0>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f7be80b40d0>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
kjbviadifbdiugfia---------------------------------------------
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1604941963.361642
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1604941963.361642 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1604941963.361642 pythondocker_db_manager
6194c72927ae8037d06847b9c9f4477d3b8e16f05c6ff22c609110020bc573f8
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1604941963.361642
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604941963.361642', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1604941963.361642
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604941963.361642', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1604941963.361642
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604941963.361642', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1604941963.361642
None
[sudo] password for miworld_monitor: docker start db_manager1604941963.361642
db_manager1604941963.361642
in socket
{'NETWORK_INTERFACE': {'MONITOR_NET': '10.0.0.12', 'MANAGER_IN_NET': '14.0.0.12', 'MANAGER_OUT_NET': '15.0.0.12'}, 'NGINX': {'IN_NET': '14.0.0.2', 'OUT_NET': '15.0.0.2', 'url_type': 'mn_con'}}
{"NETWORK_INTERFACE":{"MONITOR_NET":"10.0.0.12","MANAGER_IN_NET":"14.0.0.12","MANAGER_OUT_NET":"15.0.0.12"},"NGINX":{"IN_NET":"14.0.0.2","OUT_NET":"15.0.0.2","url_type":"mn_con"}}
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperPostgresqlViewset', 'name_space': 'PermissionPermissionBitMapper.Postgresql_viewset', 'container_type': 'db_manager'}
Try to assing a container
0 10.0.0.4 socket json http://10.0.0.12:10/get_task_from_monitor {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager', 'ip': '10.0.0.12'}
{'configes': [{'url': '/PermissionPermissionBitMapper/viewset/Cassandracreate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandracreate'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandraupdate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandraupdate'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandradelete', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandradelete'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandralist', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandralist'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandraretrieve', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandraretrieve'}], 'url_type': 'mn_con'}
scp -o StrictHostKeyChecking=no -i my_secreat temp_file.txt miworld_monitor@172.17.0.1:~/nginx_config_01.txt
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S cp nginx_config_01.txt /home/miworld_monitor/mn_con/nginx.conf"
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S python3 nginx_changer.py manager"
[sudo] password for miworld_monitor: [sudo] password for miworld_monitor: docker exec nginx_manager_connector_02 nginx -s reload
2020/11/09 17:13:11 [notice] 7#7: signal process started
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7fb05c1c83d0>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7fb05c1c83d0>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7fb05c1c83d0>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
kjbviadifbdiugfia---------------------------------------------
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1604942433.392717
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1604942433.392717 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1604942433.392717 pythondocker_db_manager
c81f8350bfa1a857ee8c582b6ffcb63273ae8a992186103a5b527855d4f4a2f5
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1604942433.392717
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604942433.392717', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1604942433.392717
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604942433.392717', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1604942433.392717
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604942433.392717', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1604942433.392717
None
[sudo] password for miworld_monitor: docker start db_manager1604942433.392717
db_manager1604942433.392717
in socket
{'NETWORK_INTERFACE': {'MONITOR_NET': '10.0.0.12', 'MANAGER_IN_NET': '14.0.0.12', 'MANAGER_OUT_NET': '15.0.0.12'}, 'NGINX': {'IN_NET': '14.0.0.2', 'OUT_NET': '15.0.0.2', 'url_type': 'mn_con'}}
{"NETWORK_INTERFACE":{"MONITOR_NET":"10.0.0.12","MANAGER_IN_NET":"14.0.0.12","MANAGER_OUT_NET":"15.0.0.12"},"NGINX":{"IN_NET":"14.0.0.2","OUT_NET":"15.0.0.2","url_type":"mn_con"}}
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperPostgresqlViewset', 'name_space': 'PermissionPermissionBitMapper.Postgresql_viewset', 'container_type': 'db_manager'}
Try to assing a container
0 10.0.0.4 socket json http://10.0.0.12:10/get_task_from_monitor {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager', 'ip': '10.0.0.12'}
{'configes': [{'url': '/PermissionPermissionBitMapper/viewset/Cassandracreate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandracreate'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandraupdate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandraupdate'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandradelete', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandradelete'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandralist', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandralist'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandraretrieve', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandraretrieve'}], 'url_type': 'mn_con'}
scp -o StrictHostKeyChecking=no -i my_secreat temp_file.txt miworld_monitor@172.17.0.1:~/nginx_config_01.txt
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S cp nginx_config_01.txt /home/miworld_monitor/mn_con/nginx.conf"
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S python3 nginx_changer.py manager"
[sudo] password for miworld_monitor: [sudo] password for miworld_monitor: docker exec nginx_manager_connector_02 nginx -s reload
2020/11/09 17:21:01 [notice] 13#13: signal process started
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f664b4352e0>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f664b4352e0>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f664b4352e0>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
kjbviadifbdiugfia---------------------------------------------
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperPostgresqlViewset', 'name_space': 'PermissionPermissionBitMapper.Postgresql_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1604942735.74138
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1604942735.74138 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1604942735.74138 pythondocker_db_manager
8abe5d3aea42a972837dac416c253d7edab431157655a14f94a0b34810f9dc1b
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1604942735.74138
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604942735.74138', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1604942735.74138
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604942735.74138', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1604942735.74138
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604942735.74138', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1604942735.74138
None
[sudo] password for miworld_monitor: docker start db_manager1604942735.74138
db_manager1604942735.74138
in socket
{'NETWORK_INTERFACE': {'MONITOR_NET': '10.0.0.12', 'MANAGER_IN_NET': '14.0.0.12', 'MANAGER_OUT_NET': '15.0.0.12'}, 'NGINX': {'IN_NET': '14.0.0.2', 'OUT_NET': '15.0.0.2', 'url_type': 'mn_con'}}
{"NETWORK_INTERFACE":{"MONITOR_NET":"10.0.0.12","MANAGER_IN_NET":"14.0.0.12","MANAGER_OUT_NET":"15.0.0.12"},"NGINX":{"IN_NET":"14.0.0.2","OUT_NET":"15.0.0.2","url_type":"mn_con"}}
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionPostgresqlViewset', 'name_space': 'PermissionPermission.Postgresql_viewset', 'container_type': 'db_manager'}
Try to assing a container
0 10.0.0.4 socket json http://10.0.0.12:10/get_task_from_monitor {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperPostgresqlViewset', 'name_space': 'PermissionPermissionBitMapper.Postgresql_viewset', 'container_type': 'db_manager', 'ip': '10.0.0.12'}
{'configes': [{'url': '/PermissionPermissionBitMapper/viewset/Postgresqlcreate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Postgresqlcreate'}, {'url': '/PermissionPermissionBitMapper/viewset/Postgresqlupdate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Postgresqlupdate'}, {'url': '/PermissionPermissionBitMapper/viewset/Postgresqldelete', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Postgresqldelete'}, {'url': '/PermissionPermissionBitMapper/viewset/Postgresqllist', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Postgresqllist'}, {'url': '/PermissionPermissionBitMapper/viewset/Postgresqlretrieve', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Postgresqlretrieve'}], 'url_type': 'mn_con'}
scp -o StrictHostKeyChecking=no -i my_secreat temp_file.txt miworld_monitor@172.17.0.1:~/nginx_config_01.txt
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S cp nginx_config_01.txt /home/miworld_monitor/mn_con/nginx.conf"
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S python3 nginx_changer.py manager"
[sudo] password for miworld_monitor: [sudo] password for miworld_monitor: docker exec nginx_manager_connector_02 nginx -s reload
2020/11/09 17:26:02 [notice] 19#19: signal process started
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f9a7fa8ff40>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f9a7fa8ff40>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f9a7fa8ff40>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
kjbviadifbdiugfia---------------------------------------------
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperPostgresqlViewset', 'name_space': 'PermissionPermissionBitMapper.Postgresql_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1604943140.049588
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1604943140.049588 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1604943140.049588 pythondocker_db_manager
96e3cb11480fbcd01e4d64efb5c3737d893ec0dba236d0e5101696a87b10be01
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1604943140.049588
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604943140.049588', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1604943140.049588
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604943140.049588', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1604943140.049588
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604943140.049588', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1604943140.049588
None
[sudo] password for miworld_monitor: docker start db_manager1604943140.049588
db_manager1604943140.049588
in socket
{'NETWORK_INTERFACE': {'MONITOR_NET': '10.0.0.12', 'MANAGER_IN_NET': '14.0.0.12', 'MANAGER_OUT_NET': '15.0.0.12'}, 'NGINX': {'IN_NET': '14.0.0.2', 'OUT_NET': '15.0.0.2', 'url_type': 'mn_con'}}
{"NETWORK_INTERFACE":{"MONITOR_NET":"10.0.0.12","MANAGER_IN_NET":"14.0.0.12","MANAGER_OUT_NET":"15.0.0.12"},"NGINX":{"IN_NET":"14.0.0.2","OUT_NET":"15.0.0.2","url_type":"mn_con"}}
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionPostgresqlViewset', 'name_space': 'PermissionPermission.Postgresql_viewset', 'container_type': 'db_manager'}
Try to assing a container
0 10.0.0.4 socket json http://10.0.0.12:10/get_task_from_monitor {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperPostgresqlViewset', 'name_space': 'PermissionPermissionBitMapper.Postgresql_viewset', 'container_type': 'db_manager', 'ip': '10.0.0.12'}
{'configes': [{'url': '/PermissionPermissionBitMapper/viewset/Postgresqlcreate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Postgresqlcreate'}, {'url': '/PermissionPermissionBitMapper/viewset/Postgresqlupdate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Postgresqlupdate'}, {'url': '/PermissionPermissionBitMapper/viewset/Postgresqldelete', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Postgresqldelete'}, {'url': '/PermissionPermissionBitMapper/viewset/Postgresqllist', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Postgresqllist'}, {'url': '/PermissionPermissionBitMapper/viewset/Postgresqlretrieve', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Postgresqlretrieve'}], 'url_type': 'mn_con'}
scp -o StrictHostKeyChecking=no -i my_secreat temp_file.txt miworld_monitor@172.17.0.1:~/nginx_config_01.txt
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S cp nginx_config_01.txt /home/miworld_monitor/mn_con/nginx.conf"
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S python3 nginx_changer.py manager"
[sudo] password for miworld_monitor: [sudo] password for miworld_monitor: docker exec nginx_manager_connector_02 nginx -s reload
2020/11/09 17:32:47 [notice] 25#25: signal process started
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f64eb85d3d0>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f64eb85d3d0>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f64eb85d3d0>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
kjbviadifbdiugfia---------------------------------------------
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperPostgresqlViewset', 'name_space': 'PermissionPermissionBitMapper.Postgresql_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1604943503.889585
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1604943503.889585 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1604943503.889585 pythondocker_db_manager
66759ce41f59cca63d3d5f1f11a51185b1943d7b5583fd12c62ed29ad76bd9c5
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1604943503.889585
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604943503.889585', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1604943503.889585
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604943503.889585', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1604943503.889585
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604943503.889585', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1604943503.889585
None
[sudo] password for miworld_monitor: docker start db_manager1604943503.889585
Error response from daemon: Address already in use
Error: failed to start containers: db_manager1604943503.889585
makefile:18: recipe for target 'run' failed
make: *** [run] Error 1
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionPostgresqlViewset', 'name_space': 'PermissionPermission.Postgresql_viewset', 'container_type': 'db_manager'}
Try to assing a container
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f847b6cb040>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f847b6cb040>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f847b6cb040>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
kjbviadifbdiugfia---------------------------------------------
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperPostgresqlViewset', 'name_space': 'PermissionPermissionBitMapper.Postgresql_viewset', 'container_type': 'db_manager'}
Try to assing a container
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f74a62b4e50>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f74a62b4e50>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f74a62b4e50>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
kjbviadifbdiugfia---------------------------------------------
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperPostgresqlViewset', 'name_space': 'PermissionPermissionBitMapper.Postgresql_viewset', 'container_type': 'db_manager'}
Try to assing a container
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f8d4ca8e670>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f8d4ca8e670>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f8d4ca8e670>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
kjbviadifbdiugfia---------------------------------------------
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperPostgresqlViewset', 'name_space': 'PermissionPermissionBitMapper.Postgresql_viewset', 'container_type': 'db_manager'}
Try to assing a container
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f538b8f76d0>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f538b8f76d0>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f538b8f76d0>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
kjbviadifbdiugfia---------------------------------------------
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperPostgresqlViewset', 'name_space': 'PermissionPermissionBitMapper.Postgresql_viewset', 'container_type': 'db_manager'}
Try to assing a container
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f694615c3d0>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f694615c3d0>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f694615c3d0>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
kjbviadifbdiugfia---------------------------------------------
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperPostgresqlViewset', 'name_space': 'PermissionPermissionBitMapper.Postgresql_viewset', 'container_type': 'db_manager'}
Try to assing a container
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7fad24df90d0>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7fad24df90d0>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7fad24df90d0>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
kjbviadifbdiugfia---------------------------------------------
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1604944271.19804
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1604944271.19804 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1604944271.19804 pythondocker_db_manager
7ad320427d6a6efdf72c19666e2514e04467fb172786479184b67523da8e8393
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1604944271.19804
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604944271.19804', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1604944271.19804
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604944271.19804', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1604944271.19804
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604944271.19804', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1604944271.19804
None
[sudo] password for miworld_monitor: docker start db_manager1604944271.19804
db_manager1604944271.19804
in socket
{'NETWORK_INTERFACE': {'MONITOR_NET': '10.0.0.12', 'MANAGER_IN_NET': '14.0.0.12', 'MANAGER_OUT_NET': '15.0.0.12'}, 'NGINX': {'IN_NET': '14.0.0.2', 'OUT_NET': '15.0.0.2', 'url_type': 'mn_con'}}
{"NETWORK_INTERFACE":{"MONITOR_NET":"10.0.0.12","MANAGER_IN_NET":"14.0.0.12","MANAGER_OUT_NET":"15.0.0.12"},"NGINX":{"IN_NET":"14.0.0.2","OUT_NET":"15.0.0.2","url_type":"mn_con"}}
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperPostgresqlViewset', 'name_space': 'PermissionPermissionBitMapper.Postgresql_viewset', 'container_type': 'db_manager'}
Try to assing a container
0 10.0.0.4 socket json http://10.0.0.12:10/get_task_from_monitor {'service_models': 'UI', 'class_name': 'PermissionPermissionBitMapperCassandraViewset', 'name_space': 'PermissionPermissionBitMapper.Cassandra_viewset', 'container_type': 'db_manager', 'ip': '10.0.0.12'}
{'configes': [{'url': '/PermissionPermissionBitMapper/viewset/Cassandracreate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandracreate'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandraupdate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandraupdate'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandradelete', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandradelete'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandralist', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandralist'}, {'url': '/PermissionPermissionBitMapper/viewset/Cassandraretrieve', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermissionBitMapper/viewset/Cassandraretrieve'}], 'url_type': 'mn_con'}
scp -o StrictHostKeyChecking=no -i my_secreat temp_file.txt miworld_monitor@172.17.0.1:~/nginx_config_01.txt
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S cp nginx_config_01.txt /home/miworld_monitor/mn_con/nginx.conf"
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S python3 nginx_changer.py manager"
[sudo] password for miworld_monitor: [sudo] password for miworld_monitor: docker exec nginx_manager_connector_02 nginx -s reload
2020/11/09 17:51:39 [notice] 7#7: signal process started
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7ff8e705fa30>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7ff8e705fa30>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7ff8e705fa30>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
kjbviadifbdiugfia---------------------------------------------
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionPostgresqlViewset', 'name_space': 'PermissionPermission.Postgresql_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1604944471.229811
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1604944471.229811 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1604944471.229811 pythondocker_db_manager
52c19018f479cc007d4ec2b7bd780f20e7f07b3d59b6c14c146f7ec4c37f1668
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1604944471.229811
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604944471.229811', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1604944471.229811
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604944471.229811', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1604944471.229811
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1604944471.229811', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1604944471.229811
None
[sudo] password for miworld_monitor: docker start db_manager1604944471.229811
Error response from daemon: Address already in use
Error: failed to start containers: db_manager1604944471.229811
makefile:18: recipe for target 'run' failed
make: *** [run] Error 1
task  {'service_models': 'UI', 'class_name': 'PermissionGroupPermissionForItemPostgresqlViewset', 'name_space': 'PermissionGroupPermissionForItem.Postgresql_viewset', 'container_type': 'db_manager'}
Try to assing a container
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7ff8c1c81b20>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7ff8c1c81b20>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7ff8c1c81b20>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
kjbviadifbdiugfia---------------------------------------------
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionPostgresqlViewset', 'name_space': 'PermissionPermission.Postgresql_viewset', 'container_type': 'db_manager'}
Try to assing a container
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f39696c9e20>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f39696c9e20>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f39696c9e20>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
kjbviadifbdiugfia---------------------------------------------
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionPostgresqlViewset', 'name_space': 'PermissionPermission.Postgresql_viewset', 'container_type': 'db_manager'}
Try to assing a container
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7fec9c3713d0>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7fec9c3713d0>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7fec9c3713d0>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
kjbviadifbdiugfia---------------------------------------------
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionPostgresqlViewset', 'name_space': 'PermissionPermission.Postgresql_viewset', 'container_type': 'db_manager'}
Try to assing a container
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7fc8901fb0d0>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7fc8901fb0d0>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7fc8901fb0d0>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
kjbviadifbdiugfia---------------------------------------------
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionPostgresqlViewset', 'name_space': 'PermissionPermission.Postgresql_viewset', 'container_type': 'db_manager'}
Try to assing a container
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7fed7605ae20>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7fed7605ae20>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7fed7605ae20>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
kjbviadifbdiugfia---------------------------------------------
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionPostgresqlViewset', 'name_space': 'PermissionPermission.Postgresql_viewset', 'container_type': 'db_manager'}
Try to assing a container
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7fb407db9a30>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7fb407db9a30>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7fb407db9a30>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
kjbviadifbdiugfia---------------------------------------------
task  {'service_models': 'UI', 'class_name': 'PermissionPermissionPostgresqlViewset', 'name_space': 'PermissionPermission.Postgresql_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1605011521.921018
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1605011521.921018 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1605011521.921018 pythondocker_db_manager
04a8ea7ea3cb6d1f5775bf4cd521a399884911fcb48b0a38a1d1f317f188f0f8
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1605011521.921018
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1605011521.921018', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1605011521.921018
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1605011521.921018', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1605011521.921018
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1605011521.921018', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1605011521.921018
None
[sudo] password for miworld_monitor: docker start db_manager1605011521.921018
db_manager1605011521.921018
in socket
{'NETWORK_INTERFACE': {'MONITOR_NET': '10.0.0.12', 'MANAGER_IN_NET': '14.0.0.12', 'MANAGER_OUT_NET': '15.0.0.12'}, 'NGINX': {'IN_NET': '14.0.0.2', 'OUT_NET': '15.0.0.2', 'url_type': 'mn_con'}}
{"NETWORK_INTERFACE":{"MONITOR_NET":"10.0.0.12","MANAGER_IN_NET":"14.0.0.12","MANAGER_OUT_NET":"15.0.0.12"},"NGINX":{"IN_NET":"14.0.0.2","OUT_NET":"15.0.0.2","url_type":"mn_con"}}
task  {'service_models': 'UI', 'class_name': 'PermissionGroupPermissionForItemPostgresqlViewset', 'name_space': 'PermissionGroupPermissionForItem.Postgresql_viewset', 'container_type': 'db_manager'}
Try to assing a container
0 10.0.0.4 socket json http://10.0.0.12:10/get_task_from_monitor {'service_models': 'UI', 'class_name': 'PermissionPermissionPostgresqlViewset', 'name_space': 'PermissionPermission.Postgresql_viewset', 'container_type': 'db_manager', 'ip': '10.0.0.12'}
{'configes': [{'url': '/PermissionPermission/viewset/Postgresqlcreate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermission/viewset/Postgresqlcreate'}, {'url': '/PermissionPermission/viewset/Postgresqlupdate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermission/viewset/Postgresqlupdate'}, {'url': '/PermissionPermission/viewset/Postgresqldelete', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermission/viewset/Postgresqldelete'}, {'url': '/PermissionPermission/viewset/Postgresqllist', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermission/viewset/Postgresqllist'}, {'url': '/PermissionPermission/viewset/Postgresqlretrieve', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/PermissionPermission/viewset/Postgresqlretrieve'}], 'url_type': 'mn_con'}
scp -o StrictHostKeyChecking=no -i my_secreat temp_file.txt miworld_monitor@172.17.0.1:~/nginx_config_01.txt
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S cp nginx_config_01.txt /home/miworld_monitor/mn_con/nginx.conf"
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S python3 nginx_changer.py manager"
[sudo] password for miworld_monitor: [sudo] password for miworld_monitor: docker exec nginx_manager_connector_02 nginx -s reload
2020/11/10 12:32:29 [notice] 11#11: signal process started
+++++++++++++++++++++++++ Monitor starting ++++++++++++++++++++++++++++++++
{'/mannager_container': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.manage_container of <import_folder.root_models.root_process.monitor object at 0x7f8bcad77400>>, 'addition_parameters': ['json', 4]}, '/initialize_suppervizor': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.initialize_suppervizor of <import_folder.root_models.root_process.monitor object at 0x7f8bcad77400>>, 'addition_parameters': ['json', 4]}, '/get_all_debugging_info': {'method': 'socket', 'callback': <bound method RootServiceForMannageSupervisor.get_all_debugging_info of <import_folder.root_models.root_process.monitor object at 0x7f8bcad77400>>, 'addition_parameters': ['json', 4]}}
+++++++++++++++++++++++++ Monitor Client services is starting ++++++++++++++++++++++++++++++++
{}
kjbviadifbdiugfia---------------------------------------------
task  {'service_models': 'UI', 'class_name': 'UserViewPostgresqlViewset', 'name_space': 'UserView.Postgresql_viewset', 'container_type': 'db_manager'}
Try to assing a container
haiiiiiiii  pythondocker_db_manager db_manager1605012462.979296
make IMAGE_NAME=pythondocker_db_manager CONTAINER_NAME=db_manager1605012462.979296 create_container
[sudo] password for miworld_monitor: docker create --rm --name db_manager1605012462.979296 pythondocker_db_manager
f45d44e3c5ce2a09bd910750149e9d5880eb0810b9d32a8d29da84b63d24d9d1
{'manager_input_bridge': '14.0.0.12', 'manager_output_bridge': '15.0.0.12', 'monitor_bridge': '10.0.0.12'}
[sudo] password for miworld_monitor: docker network connect --ip 14.0.0.12 manager_input_bridge db_manager1605012462.979296
{'ip_address': '14.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1605012462.979296', 'inter_face_code': 'MANAGER_IN_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 15.0.0.12 manager_output_bridge db_manager1605012462.979296
{'ip_address': '15.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1605012462.979296', 'inter_face_code': 'MANAGER_OUT_NET'}
[sudo] password for miworld_monitor: docker network connect --ip 10.0.0.12 monitor_bridge db_manager1605012462.979296
{'ip_address': '10.0.0.12', 'container_type': 'db_manager', 'container_name': 'db_manager1605012462.979296', 'inter_face_code': 'MONITOR_NET'}
pythondocker_db_manager db_manager1605012462.979296
None
[sudo] password for miworld_monitor: docker start db_manager1605012462.979296
db_manager1605012462.979296
in socket
{'NETWORK_INTERFACE': {'MONITOR_NET': '10.0.0.12', 'MANAGER_IN_NET': '14.0.0.12', 'MANAGER_OUT_NET': '15.0.0.12'}, 'NGINX': {'IN_NET': '14.0.0.2', 'OUT_NET': '15.0.0.2', 'url_type': 'mn_con'}}
{"NETWORK_INTERFACE":{"MONITOR_NET":"10.0.0.12","MANAGER_IN_NET":"14.0.0.12","MANAGER_OUT_NET":"15.0.0.12"},"NGINX":{"IN_NET":"14.0.0.2","OUT_NET":"15.0.0.2","url_type":"mn_con"}}
0 10.0.0.4 socket json http://10.0.0.12:10/get_task_from_monitor {'service_models': 'UI', 'class_name': 'UserViewPostgresqlViewset', 'name_space': 'UserView.Postgresql_viewset', 'container_type': 'db_manager', 'ip': '10.0.0.12'}
{'configes': [{'url': '/UserView/viewset/Postgresqlcreate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/UserView/viewset/Postgresqlcreate'}, {'url': '/UserView/viewset/Postgresqlupdate', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/UserView/viewset/Postgresqlupdate'}, {'url': '/UserView/viewset/Postgresqldelete', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/UserView/viewset/Postgresqldelete'}, {'url': '/UserView/viewset/Postgresqllist', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/UserView/viewset/Postgresqllist'}, {'url': '/UserView/viewset/Postgresqlretrieve', 'url_type': 'mn_con', 'ip': '10.0.0.12', 'port': 11, 'weight': 5, 'protocol': 'http', 'method': '/UserView/viewset/Postgresqlretrieve'}], 'url_type': 'mn_con'}
scp -o StrictHostKeyChecking=no -i my_secreat temp_file.txt miworld_monitor@172.17.0.1:~/nginx_config_01.txt
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S cp nginx_config_01.txt /home/miworld_monitor/mn_con/nginx.conf"
ssh -o StrictHostKeyChecking=no -i my_secreat -tt miworld_monitor@172.17.0.1 "echo maa@12345|sudo -S python3 nginx_changer.py manager"
[sudo] password for miworld_monitor: [sudo] password for miworld_monitor: docker exec nginx_manager_connector_02 nginx -s reload
2020/11/10 12:48:10 [notice] 24#24: signal process started
