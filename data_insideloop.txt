{'namespace': 'common_models.common_api_lib', 'created_by': 'sys', 'source_code': 'class GenClass:\n    allow_function =[\'*\']\n    backend_func = None\n    function_dict= {}\n    network_interface = ""\n    url_type = \'ui\'\n    thread_manager_obj = None\n    loop_index = None\n    \n    def __init__(self,thread_manager_obj=None,loop_index=None):\n        #print(\'haiigen\')\n        if thread_manager_obj is not None and loop_index is not None:\n            self.thread_manager_obj = thread_manager_obj\n            self.loop_index = loop_index\n\n    def create_router(self):\n        r = router()\n        temp_url = []\n        \n        if self.allow_function[0] ==\'*\':\n            for x in self.function_dict:\n                if len(self.function_dict[x]) ==2:\n                    temp_url.append([x,self.function_dict[x][1],getattr(self,self.function_dict[x][0]),\'json\',4]) #### security layer 4 for all layer security, json type is default data type\n                else:\n                    temp_url.append([x,self.function_dict[x][1],getattr(self,self.function_dict[x][0]),self.function_dict[x][2],self.function_dict[x][3]])\n\n\n        else:\n            for x in self.allow_function:\n                if len(self.function_dict[x]) ==2:\n                    temp_url.append([x,self.function_dict[x][1],getattr(self,self.function_dict[x][0]),\'json\',4]) \n                else:\n                    temp_url.append([x,self.function_dict[x][1],getattr(self,self.function_dict[x][0]),self.function_dict[x][2],self.function_dict[x][3]])\n\n        r.urls = temp_url\n        return r\n\n\nclass router:\n    """ router class """\n    urls = [] ### [regx, [method,rout_function]|router ] {name:\\d+}\n    dict_url ={}\n    buffer_size = 1000000000000\n    #__call=False\n\n    #def __init__(selfs):\n     #   self.urls = urls\n      #  self.get_urls()\n       # __call=True\n\n    def get_urls(self,sep=\'/\'):\n        actual_url = []\n        #if self.__call:\n         #   return copy.deepcopy(self.urls)\n        u = self.urls\n        for x in u:\n            if len(x) == 2:\n                if type(x[1]) is router:\n                    temp_urls = x[1].get_urls() ### Get all url of the model\n                    for y in range(len(temp_urls)):\n                        temp_urls[y][0] = sep.join([x[0],temp_urls[y][0]]) ### Get url from map root\n                    actual_url = actual_url + temp_urls\n                else:\n                    return False\n            else:\n                actual_url.append(x)\n        self.urls = actual_url\n        #print(self.urls)\n        return actual_url\n\n    def create_dict(self):\n        """Converts url list into dictionary"""\n\n        temp_urls = self.urls\n        dict_url = {}\n        for x in temp_urls:\n            dict_url[x[0]] = {"method":x[1],"callback":x[2],"addition_parameters":[x[3],x[4]]}\n        self.dict_url = dict_url\n    \n    def get_urls_list(self):\n        urls = self.urls\n        url_list = []\n        for x in urls:\n            url_list.append(x)\n        \n        return  url_list\n\nclass BackendProcess:\n    fun_list = None\n    allow_fun = [\'*\']\n\n    def get_services(self):\n        tmp={}\n        if self.allow_fun[0]==\'*\':\n            for x in self.fun_list:\n                tmp[x]=getattr(self,x)\n        return tmp\t\n\n\ndef get_ip(request):\n        client_address = None\n        try:\n            # case server 200.000.02.001\n            client_address = request.META["HTTP_X_FORWARDED_FOR"]\n        except:\n            # case localhost ou 127.0.0.1\n            client_address = request.META["REMOTE_ADDR"]\n        return client_address\n\n', 'created_at': '2020-11-09 12:39:36.249982', 'time_stamp': 1604905776.2500002, 'import_parameters': '{}'}
{'namespace': 'common_models.common_count_viewset', 'created_by': 'sys', 'source_code': '#import uuid\n\n#import datetime\n\n#from db_manager_viewset import cassandra_manager_obj, cache_manager_obj\n#from cache_manager import cache_manager_obj\n#from cassandra_manager import cassandra_manager\n#from post_gras_manager import post_gras_manager\n\nclass CommonCount(ViewSetMaster):\n    permission_class = ParmissionChacker\n    lookup_field =\'user\'\n    loop_index = None\n    pk = \'pk\'\n    serializer_class = None #Serializer\n    require_user_mapping = False\n    user_fild = None\n    model_name = ""\n    tmp_cache=None\n    db_manager_class = None #DB_client\n    db_manager_client = None\n    allow_function =[\'*\']\n    permission_list = [\'read\',\'write\',\'edit\',\'delete\']\n    function_dict= {\n            \'list\':[\'list\',\'get\'],\n            \'create\':[\'create\',\'post\'],\n            \'retrive\':[\'retrive\',\'get\'],\n            \'update\':[\'update\',\'put\'],\n            \'destroy\':[\'destroy\',\'post\'],\n            \'partial_update\':[\'partial_update\',\'put\']\n            }\n\n\n    def id_generetor(user):\n        return user+str(datetime.datetime.timestamp())\n\n    def __init__(self,thread_manager_obj,loop_index):\n        print(\'haiigen\')\n        self.permission_obj = self.permission_class(thread_manager_obj,loop_index)\n        self.thread_manager_obj = thread_manager_obj\n        self.loop_index = loop_index\n        self.db_manager_client = self.db_manager_class(thread_manager_obj,loop_index)\n        #self.permission_mape\n\n\n\n\n    async def create(self,request):\n        if self.permission_obj.has_permission(request.user, self.model_name,self.permission_mape[\'write\']):\n            data = request.data\n            serializer_data = self.serializer_class(data=data)\n            if serializer_data.is_valid():\n                rs = await self.db_manager_client.create(data)\n                return (request.data, 201)\n            else:\n                return  (request.data, 406)\n\n        else:\n            return "Invalid Authorization",400\n\n\n    async def retrive(request, pk=None):\n        if self.permission_obj.has_permission(request.user, self.model_name,self.permission_mape[\'read\']):\n            if pk is not None:\n                if self.permission_obj.has_object_permission(request.user, pk,self.permission_mape[\'read\']):\n                    data = await self.db_manager_client.retrive(request,pk)\n                    return data,201\n                else:\n                    return \'Invalid Authorization for the item\',400\n        else:\n            return "Invalid Authorization",400\n\n    async def update(self,request, pk=None):\n        if self.permission_obj.has_permission(request.user, self.model_name,self.permission_mape[\'edit\']):\n            if pk is None:\n                return  (request.data, 400)\n            else:\n                if self.permission_obj.has_object_permission(request.user, pk,self.permission_mape[\'edit\']):\n                    data = request.data\n                    serializer_data = self.serializer_class(data=data)\n                    if serializer_data.is_valid():\n                        rs = await self.db_manager_client.update(request,pk)\n                        return (rs, 201)\n                else:\n                    return "Invalid Authorization for the item",400\n                else:\n                    return (rs, 406)\n\n        else:\n            return "Invalid Authorization",400\n\n    async def partial_update(self,request, pk=None):\n        return await self.update(request,pk)\n\n    async def destroy(request, pk=None):\n        if self.permission_obj.has_permission(request.user, self.model_name,self.permission_mape[\'delete\']):\n            if self.permission_obj.has_object_permission(request.user, pk,self.permission_mape[\'delete\']):\n                if pk is None:\n                    return  (request.data, 400)\n                else:\n                    rs = self.db_manager_client.destroy(request,pk)\n                    res1 = rs[\'row_effected\']\n                    if res1 > 0:\n                        return (request.data, 201)\n                    else:\n                        return (request.data, 406)\n\n            else:\n                return "Invalid Authorization for the item",400\n\n        else:\n            return "Invalid Authorization",400\n\n   # def create_router():\n   #     r = router()\n   #     temp_url = []\n   #     for x in self.function_dict:\n   #         temp_url.append(self.function_dict[x][0],self.function_dict[x][1],getattr(self,x))\n   #     r.urls = temp_url\n   #     return r\n', 'created_at': '2020-11-09 12:39:36.253519', 'time_stamp': 1604905776.2535372, 'import_parameters': '{"common_api_lib": ["router,GenClass", "custom"], "db_manager_client": ["DBClient", "custom"], "permission_model.permission_checker": ["ParmissionChacker", "custom"], "datetime": ["sys"], "serializers": ["Serializer", "custom"], "common_model.async_viewset": ["ViewSetMaster", "custom"]}'}
{'namespace': 'common_models.common_id_generator', 'created_by': 'sys', 'source_code': "def id_generetor(parameters,joint_str = ''): #### []\n        return joint_str.join(parameters)#user+str(datetime.datetime.timestamp())\n", 'created_at': '2020-11-09 12:39:36.256422', 'time_stamp': 1604905776.256441, 'import_parameters': '{}'}
{'namespace': 'common_models.async_viewset', 'created_by': 'sys', 'source_code': '#import uuid\n\n#import datetime\n\n#from db_manager_viewset import cassandra_manager_obj, cache_manager_obj\n#from cache_manager import cache_manager_obj\n#from cassandra_manager import cassandra_manager\n#from post_gras_manager import post_gras_manager\n\n\n\nclass ViewSetMaster(GenClass):\n    permission_class = ParmissionChacker\n    lookup_field =\'user\'\n    loop_index = None\n    pk = \'pk\'\n    serializer_class = None #Serializer\n    require_user_mapping = False\n    user_fild = None\n    model_name = ""\n    tmp_cache=None\n    db_manager_class = None #DB_client\n    db_manager_client = None\n    allow_function =[\'*\']\n    permission_list = [\'read\',\'write\',\'edit\',\'delete\']\n    function_dict= {\n            \'list\':[\'list\',\'get\'],\n            \'create\':[\'create\',\'post\'],\n            \'retrive\':[\'retrive\',\'get\'],\n            \'update\':[\'update\',\'put\'],\n            \'destroy\':[\'destroy\',\'post\'],\n            \'partial_update\':[\'partial_update\',\'put\']\n            }\n\n\n    def id_generetor(user):\n        return user+str(datetime.datetime.timestamp())\n\n    def __init__(self,thread_manager_obj,loop_index):\n        self.permission_obj = self.permission_class(thread_manager_obj,loop_index)\n        self.thread_manager_obj = thread_manager_obj\n        self.loop_index = loop_index\n        self.db_manager_client = self.db_manager_class(thread_manager_obj,loop_index)\n        #self.permission_mape\n\n    async def list(self, request):\n\n        if await self.permission_obj.has_permission(request.user, self.model_name,\'read\'):\n            data = await self.db_manager_client.list(request)\n            return data,200\n        else:\n            return "Invalid Authorization",400\n\n\n    async def create(self,request):\n        user = request.user\n\n        if await self.permission_obj.has_permission(user, self.model_name,\'write\'):\n            id = self.id_generetor(user)\n            data = request.data\n            data[self.pk] = id\n            serializer_data = self.serializer_class(data=data)\n            if serializer_data.is_valid():\n\n                self.permission_obj.assing_permission(user,self.model,id,\'*\',\'*\',True)\n                rs = await self.db_manager_client.create(request[\'data\'])\n                return (request.data, 201)\n            else:\n                return  (request.data, 406)\n\n        else:\n            return "Invalid Authorization",400\n\n\n    async def retrive(request, pk=None):\n        if self.permission_obj.has_permission(request.user, self.model_name,\'read\'):\n            if pk is not None:\n                if self.permission_obj.has_object_permission(request.user, pk,\'read\'):\n                    data = await self.db_manager_client.retrive(request,pk)\n                    return data,201\n                else:\n                    return \'Invalid Authorization for the item\',400\n        else:\n            return "Invalid Authorization",400\n\n    async def update(self,request, pk=None):\n        if self.permission_obj.has_permission(request.user, self.model_name,\'edit\'):\n            if pk is None:\n                return  (request.data, 400)\n            else:\n                if self.permission_obj.has_object_permission(request.user, pk,\'edit\'):\n                    data = request.data\n                    serializer_data = self.serializer_class(data=data)\n                    if serializer_data.is_valid():\n                        rs = await self.db_manager_client.update(request,pk)\n                        return (rs, 201)\n                else:\n                    return "Invalid Authorization for the item",400\n                else:\n                    return (rs, 406)\n\n        else:\n            return "Invalid Authorization",400\n\n    async def partial_update(self,request, pk=None):\n        return await self.update(request,pk)\n\n    async def destroy(request, pk=None):\n        if self.permission_obj.has_permission(request.user, self.model_name,\'delete\'):\n            if self.permission_obj.has_object_permission(request.user, pk,\'delete\'):\n                if pk is None:\n                    return  (request.data, 400)\n                else:\n                    rs = self.db_manager_client.destroy(request,pk)\n                    res1 = rs[\'row_effected\']\n                    if res1 > 0:\n                        return (request.data, 201)\n                    else:\n                        return (request.data, 406)\n\n            else:\n                return "Invalid Authorization for the item",400\n\n        else:\n            return "Invalid Authorization",400\n\n   # def create_router():\n   #     r = router()\n   #     temp_url = []\n   #     for x in self.function_dict:\n   #         temp_url.append(self.function_dict[x][0],self.function_dict[x][1],getattr(self,x))\n   #     r.urls = temp_url\n   #     return r\n', 'created_at': '2020-11-09 12:39:36.259640', 'time_stamp': 1604905776.2596624, 'import_parameters': '{"common_api_lib": ["router,GenClass", "custom"], "db_manager_client": ["DBClient", "custom"], "permission_model.permission_checker": ["ParmissionChecker", "custom"], "datetime": ["sys"], "serializers": ["Serializer", "custom"]}'}
