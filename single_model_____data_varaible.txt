............................************************............................
{'namespace': 'common_models.async_viewset', 'created_by': 'sys', 'source_code': '#import uuid\n\n#import datetime\n\n#from db_manager_viewset import cassandra_manager_obj, cache_manager_obj\n#from cache_manager import cache_manager_obj\n#from cassandra_manager import cassandra_manager\n#from post_gras_manager import post_gras_manager\n\n\n\nclass ViewSetMaster(GenClass):\n    permission_class = ParmissionChacker\n    lookup_field =\'user\'\n    loop_index = None\n    pk = \'pk\'\n    serializer_class = None #Serializer\n    require_user_mapping = False\n    user_fild = None\n    model_name = ""\n    tmp_cache=None\n    db_manager_class = None #DB_client\n    db_manager_client = None\n    allow_function =[\'*\']\n    permission_list = [\'read\',\'write\',\'edit\',\'delete\']\n    function_dict= {\n            \'list\':[\'list\',\'get\'],\n            \'create\':[\'create\',\'post\'],\n            \'retrive\':[\'retrive\',\'get\'],\n            \'update\':[\'update\',\'put\'],\n            \'destroy\':[\'destroy\',\'post\'],\n            \'partial_update\':[\'partial_update\',\'put\']\n            }\n\n\n    def id_generetor(user):\n        return user+str(datetime.datetime.timestamp())\n\n    def __init__(self,thread_manager_obj,loop_index):\n        self.permission_obj = self.permission_class(thread_manager_obj,loop_index)\n        self.thread_manager_obj = thread_manager_obj\n        self.loop_index = loop_index\n        self.db_manager_client = self.db_manager_class(thread_manager_obj,loop_index)\n        #self.permission_mape\n\n    async def list(self, request):\n\n        if await self.permission_obj.has_permission(request.user, self.model_name,\'read\'):\n            data = await self.db_manager_client.list(request)\n            return data,200\n        else:\n            return "Invalid Authorization",400\n\n\n    async def create(self,request):\n        user = request.user\n\n        if await self.permission_obj.has_permission(user, self.model_name,\'write\'):\n            id = self.id_generetor(user)\n            data = request.data\n            data[self.pk] = id\n            serializer_data = self.serializer_class(data=data)\n            if serializer_data.is_valid():\n\n                self.permission_obj.assing_permission(user,self.model,id,\'*\',\'*\',True)\n                rs = await self.db_manager_client.create(request[\'data\'])\n                return (request.data, 201)\n            else:\n                return  (request.data, 406)\n\n        else:\n            return "Invalid Authorization",400\n\n\n    async def retrive(request, pk=None):\n        if self.permission_obj.has_permission(request.user, self.model_name,\'read\'):\n            if pk is not None:\n                if self.permission_obj.has_object_permission(request.user, pk,\'read\'):\n                    data = await self.db_manager_client.retrive(request,pk)\n                    return data,201\n                else:\n                    return \'Invalid Authorization for the item\',400\n        else:\n            return "Invalid Authorization",400\n\n    async def update(self,request, pk=None):\n        if self.permission_obj.has_permission(request.user, self.model_name,\'edit\'):\n            if pk is None:\n                return  (request.data, 400)\n            else:\n                if self.permission_obj.has_object_permission(request.user, pk,\'edit\'):\n                    data = request.data\n                    serializer_data = self.serializer_class(data=data)\n                    if serializer_data.is_valid():\n                        rs = await self.db_manager_client.update(request,pk)\n                        return (rs, 201)\n                else:\n                    return "Invalid Authorization for the item",400\n                else:\n                    return (rs, 406)\n\n        else:\n            return "Invalid Authorization",400\n\n    async def partial_update(self,request, pk=None):\n        return await self.update(request,pk)\n\n    async def destroy(request, pk=None):\n        if self.permission_obj.has_permission(request.user, self.model_name,\'delete\'):\n            if self.permission_obj.has_object_permission(request.user, pk,\'delete\'):\n                if pk is None:\n                    return  (request.data, 400)\n                else:\n                    rs = self.db_manager_client.destroy(request,pk)\n                    res1 = rs[\'row_effected\']\n                    if res1 > 0:\n                        return (request.data, 201)\n                    else:\n                        return (request.data, 406)\n\n            else:\n                return "Invalid Authorization for the item",400\n\n        else:\n            return "Invalid Authorization",400\n\n   # def create_router():\n   #     r = router()\n   #     temp_url = []\n   #     for x in self.function_dict:\n   #         temp_url.append(self.function_dict[x][0],self.function_dict[x][1],getattr(self,x))\n   #     r.urls = temp_url\n   #     return r\n', 'created_at': '2020-11-09 12:21:03.552650', 'time_stamp': 1604904663.552668, 'import_parameters': '{"common_api_lib": ["router,GenClass", "custom"], "db_manager_client": ["DBClient", "custom"], "permission_model.permission_checker": ["ParmissionChecker", "custom"], "datetime": ["sys"], "serializers": ["Serializer", "custom"]}'}
#################################################################################
